{"ast":null,"code":"import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\n\nconst useGeoWeather = () => {\n  const {\n    0: usingGeoIp,\n    1: setGeoIp\n  } = useState(false);\n  const {\n    0: weather,\n    1: setWeather\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: location,\n    1: setLocation\n  } = useState();\n  useEffect(() => {\n    let geo;\n\n    async function withBrowserLocation() {\n      navigator.geolocation.getCurrentPosition(sucess => {\n        setLocation({\n          lat: sucess.coords.latitude,\n          lng: sucess.coords.longitude\n        });\n      }, _ => {\n        setGeoIp(true);\n        withIpLocation().then(setLocation);\n      });\n    }\n\n    useWeatherCordinates(location).then(_weather => {\n      setWeather(_weather);\n      setLoading(false);\n    });\n  }, []);\n  return [weather, loading, usingGeoIp];\n};\n\nexport default useGeoWeather;\nexport async function useWeatherCordinates(props) {\n  const _result = await axios.get(`http://api.openweathermap.org/data/2.5/weather?units=metric&lat=${props.lat.toString()}&lon=${props === null || props === void 0 ? void 0 : props.lng.toString()}&appid=${process.env.WEATHER_KEY}`);\n\n  return _result.data;\n}\nexport async function withIpLocation() {\n  const _result = await axios.get(`https://ipgeolocation.abstractapi.com/v1/?api_key=${process.env.IPLOCATION_KEY}`);\n\n  return {\n    lat: _result.data.latitude,\n    lng: _result.data.longitude\n  };\n}","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/hooks/useWeather.tsx"],"names":["axios","useEffect","useState","useGeoWeather","usingGeoIp","setGeoIp","weather","setWeather","loading","setLoading","location","setLocation","geo","withBrowserLocation","navigator","geolocation","getCurrentPosition","sucess","lat","coords","latitude","lng","longitude","_","withIpLocation","then","useWeatherCordinates","_weather","props","_result","get","toString","process","env","WEATHER_KEY","data","IPLOCATION_KEY"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAGA,MAAMC,aAAa,GAAG,MAAM;AAC1B,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAAyBH,QAAQ,CAAC,KAAD,CAAvC;AACA,QAAM;AAAA,OAACI,OAAD;AAAA,OAAUC;AAAV,MAAwBL,QAAQ,EAAtC;AACA,QAAM;AAAA,OAACM,OAAD;AAAA,OAAUC;AAAV,MAAwBP,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM;AAAA,OAACQ,QAAD;AAAA,OAAWC;AAAX,MAA0BT,QAAQ,EAAxC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,GAAJ;;AACA,mBAAeC,mBAAf,GAAqC;AACnCC,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CACGC,MAAD,IAAY;AACVN,QAAAA,WAAW,CAAC;AACVO,UAAAA,GAAG,EAAED,MAAM,CAACE,MAAP,CAAcC,QADT;AAEVC,UAAAA,GAAG,EAAEJ,MAAM,CAACE,MAAP,CAAcG;AAFT,SAAD,CAAX;AAID,OANH,EAOGC,CAAD,IAAO;AACLlB,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACAmB,QAAAA,cAAc,GAAGC,IAAjB,CAAsBd,WAAtB;AACD,OAVH;AAYD;;AAEDe,IAAAA,oBAAoB,CAAChB,QAAD,CAApB,CAA+Be,IAA/B,CAAqCE,QAAD,IAAc;AAChDpB,MAAAA,UAAU,CAACoB,QAAD,CAAV;AACAlB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAHD;AAID,GArBQ,EAqBN,EArBM,CAAT;AAuBA,SAAO,CAACH,OAAD,EAAUE,OAAV,EAAmBJ,UAAnB,CAAP;AACD,CA9BD;;AAgCA,eAAeD,aAAf;AAEA,OAAO,eAAeuB,oBAAf,CACLE,KADK,EAEkB;AACvB,QAAMC,OAAO,GAAG,MAAM7B,KAAK,CAAC8B,GAAN,CACnB,mEAAkEF,KAAK,CAACV,GAAN,CAAUa,QAAV,EAAqB,QAAOH,KAA/F,aAA+FA,KAA/F,uBAA+FA,KAAK,CAAEP,GAAP,CAAWU,QAAX,EAAsB,UACnHC,OAAO,CAACC,GAAR,CAAYC,WACb,EAHmB,CAAtB;;AAKA,SAAOL,OAAO,CAACM,IAAf;AACD;AAED,OAAO,eAAeX,cAAf,GAAwD;AAC7D,QAAMK,OAAO,GAAG,MAAM7B,KAAK,CAAC8B,GAAN,CACnB,qDAAoDE,OAAO,CAACC,GAAR,CAAYG,cAAe,EAD5D,CAAtB;;AAGA,SAAO;AACLlB,IAAAA,GAAG,EAAEW,OAAO,CAACM,IAAR,CAAaf,QADb;AAELC,IAAAA,GAAG,EAAEQ,OAAO,CAACM,IAAR,CAAab;AAFb,GAAP;AAID","sourcesContent":["import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { GeoCordinates, WeatherProps } from \"../interfaces/types\";\n\nconst useGeoWeather = () => {\n  const [usingGeoIp, setGeoIp] = useState(false);\n  const [weather, setWeather] = useState<any>();\n  const [loading, setLoading] = useState(true);\n  const [location, setLocation] = useState<any>();\n\n  useEffect(() => {\n    let geo: any;\n    async function withBrowserLocation() {\n      navigator.geolocation.getCurrentPosition(\n        (sucess) => {\n          setLocation({\n            lat: sucess.coords.latitude,\n            lng: sucess.coords.longitude,\n          });\n        },\n        (_) => {\n          setGeoIp(true);\n          withIpLocation().then(setLocation);\n        }\n      );\n    }\n\n    useWeatherCordinates(location).then((_weather) => {\n      setWeather(_weather);\n      setLoading(false);\n    });\n  }, []);\n\n  return [weather, loading, usingGeoIp];\n};\n\nexport default useGeoWeather;\n\nexport async function useWeatherCordinates(\n  props: GeoCordinates\n): Promise<WeatherProps> {\n  const _result = await axios.get(\n    `http://api.openweathermap.org/data/2.5/weather?units=metric&lat=${props.lat.toString()}&lon=${props?.lng.toString()}&appid=${\n      process.env.WEATHER_KEY\n    }`\n  );\n  return _result.data;\n}\n\nexport async function withIpLocation(): Promise<GeoCordinates> {\n  const _result = await axios.get(\n    `https://ipgeolocation.abstractapi.com/v1/?api_key=${process.env.IPLOCATION_KEY}`\n  );\n  return {\n    lat: _result.data.latitude,\n    lng: _result.data.longitude,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}