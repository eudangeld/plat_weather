{"ast":null,"code":"import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\n\nconst useGeoWeather = () => {\n  const {\n    0: usingGeoIp,\n    1: setGeoIp\n  } = useState(false);\n  const {\n    0: weather,\n    1: setWeather\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  useEffect(() => {\n    let geo;\n\n    async function withBrowserLocation() {\n      console.log(\"tryin browser\");\n      return navigator.geolocation.getCurrentPosition(b => {\n        console.log(b);\n        setGeoIp(false);\n        return {\n          lat: b.coords.latitude,\n          lng: b.coords.longitude\n        };\n      });\n    }\n\n    async function getLocation() {\n      console.log(geo);\n      geo = await withBrowserLocation();\n\n      if (geo === undefined) {\n        console.log(\"bora de ip\");\n        setGeoIp(true);\n        geo = await useIPWeather();\n      }\n\n      useWeatherCordinates(geo).then(_weather => {\n        setWeather(_weather);\n        setLoading(false);\n      });\n    }\n\n    getLocation();\n  }, []);\n  return [weather, loading, usingGeoIp];\n};\n\nexport default useGeoWeather;\nexport async function useWeatherCordinates(props) {\n  const _result = await axios.get(`http://api.openweathermap.org/data/2.5/weather?units=metric&lat=${props.lat.toString()}&lon=${props === null || props === void 0 ? void 0 : props.lng.toString()}&appid=${process.env.WEATHER_KEY}`);\n\n  return _result.data;\n}\nexport async function useIPWeather() {\n  const _result = await axios.get(`https://ipgeolocation.abstractapi.com/v1/?api_key=${process.env.IPLOCATION_KEY}`);\n\n  return {\n    lat: _result.data.latitude,\n    lng: _result.data.longitude\n  };\n}","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/hooks/useWeather.tsx"],"names":["axios","useEffect","useState","useGeoWeather","usingGeoIp","setGeoIp","weather","setWeather","loading","setLoading","geo","withBrowserLocation","console","log","navigator","geolocation","getCurrentPosition","b","lat","coords","latitude","lng","longitude","getLocation","undefined","useIPWeather","useWeatherCordinates","then","_weather","props","_result","get","toString","process","env","WEATHER_KEY","data","IPLOCATION_KEY"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAGA,MAAMC,aAAa,GAAG,MAAM;AAC1B,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAAyBH,QAAQ,CAAC,KAAD,CAAvC;AACA,QAAM;AAAA,OAACI,OAAD;AAAA,OAAUC;AAAV,MAAwBL,QAAQ,EAAtC;AACA,QAAM;AAAA,OAACM,OAAD;AAAA,OAAUC;AAAV,MAAwBP,QAAQ,CAAC,IAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,GAAJ;;AACA,mBAAeC,mBAAf,GAAqC;AACnCC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,aAAOC,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,CAAD,IAAO;AACrDL,QAAAA,OAAO,CAACC,GAAR,CAAYI,CAAZ;AACAZ,QAAAA,QAAQ,CAAC,KAAD,CAAR;AAEA,eAAO;AACLa,UAAAA,GAAG,EAAED,CAAC,CAACE,MAAF,CAASC,QADT;AAELC,UAAAA,GAAG,EAAEJ,CAAC,CAACE,MAAF,CAASG;AAFT,SAAP;AAID,OARM,CAAP;AASD;;AAED,mBAAeC,WAAf,GAA6B;AAC3BX,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACAA,MAAAA,GAAG,GAAG,MAAMC,mBAAmB,EAA/B;;AACA,UAAID,GAAG,KAAKc,SAAZ,EAAuB;AACrBZ,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAR,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACAK,QAAAA,GAAG,GAAG,MAAMe,YAAY,EAAxB;AACD;;AACDC,MAAAA,oBAAoB,CAAChB,GAAD,CAApB,CAA0BiB,IAA1B,CAAgCC,QAAD,IAAc;AAC3CrB,QAAAA,UAAU,CAACqB,QAAD,CAAV;AACAnB,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD,OAHD;AAID;;AAEDc,IAAAA,WAAW;AACZ,GA9BQ,EA8BN,EA9BM,CAAT;AAgCA,SAAO,CAACjB,OAAD,EAAUE,OAAV,EAAmBJ,UAAnB,CAAP;AACD,CAtCD;;AAwCA,eAAeD,aAAf;AAEA,OAAO,eAAeuB,oBAAf,CACLG,KADK,EAEkB;AACvB,QAAMC,OAAO,GAAG,MAAM9B,KAAK,CAAC+B,GAAN,CACnB,mEAAkEF,KAAK,CAACX,GAAN,CAAUc,QAAV,EAAqB,QAAOH,KAA/F,aAA+FA,KAA/F,uBAA+FA,KAAK,CAAER,GAAP,CAAWW,QAAX,EAAsB,UACnHC,OAAO,CAACC,GAAR,CAAYC,WACb,EAHmB,CAAtB;;AAKA,SAAOL,OAAO,CAACM,IAAf;AACD;AAED,OAAO,eAAeX,YAAf,GAAsD;AAC3D,QAAMK,OAAO,GAAG,MAAM9B,KAAK,CAAC+B,GAAN,CACnB,qDAAoDE,OAAO,CAACC,GAAR,CAAYG,cAAe,EAD5D,CAAtB;;AAGA,SAAO;AACLnB,IAAAA,GAAG,EAAEY,OAAO,CAACM,IAAR,CAAahB,QADb;AAELC,IAAAA,GAAG,EAAES,OAAO,CAACM,IAAR,CAAad;AAFb,GAAP;AAID","sourcesContent":["import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { GeoCordinates, WeatherProps } from \"../interfaces/types\";\n\nconst useGeoWeather = () => {\n  const [usingGeoIp, setGeoIp] = useState(false);\n  const [weather, setWeather] = useState<any>();\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    let geo: any;\n    async function withBrowserLocation() {\n      console.log(\"tryin browser\");\n      return navigator.geolocation.getCurrentPosition((b) => {\n        console.log(b);\n        setGeoIp(false);\n\n        return {\n          lat: b.coords.latitude,\n          lng: b.coords.longitude,\n        };\n      });\n    }\n\n    async function getLocation() {\n      console.log(geo);\n      geo = await withBrowserLocation();\n      if (geo === undefined) {\n        console.log(\"bora de ip\");\n        setGeoIp(true);\n        geo = await useIPWeather();\n      }\n      useWeatherCordinates(geo).then((_weather) => {\n        setWeather(_weather);\n        setLoading(false);\n      });\n    }\n\n    getLocation();\n  }, []);\n\n  return [weather, loading, usingGeoIp];\n};\n\nexport default useGeoWeather;\n\nexport async function useWeatherCordinates(\n  props: GeoCordinates\n): Promise<WeatherProps> {\n  const _result = await axios.get(\n    `http://api.openweathermap.org/data/2.5/weather?units=metric&lat=${props.lat.toString()}&lon=${props?.lng.toString()}&appid=${\n      process.env.WEATHER_KEY\n    }`\n  );\n  return _result.data;\n}\n\nexport async function useIPWeather(): Promise<GeoCordinates> {\n  const _result = await axios.get(\n    `https://ipgeolocation.abstractapi.com/v1/?api_key=${process.env.IPLOCATION_KEY}`\n  );\n  return {\n    lat: _result.data.latitude,\n    lng: _result.data.longitude,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}