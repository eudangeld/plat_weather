{"ast":null,"code":"import _regeneratorRuntime from \"/Users/dannylodangel/Documents/repos/plat_weather/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/dannylodangel/Documents/repos/plat_weather/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { useLayoutEffect, useState } from \"react\";\nimport { useIPWeather, useWeatherCordinates } from \"./use-weather\";\n\nfunction AutoWeather(_x) {\n  return _AutoWeather.apply(this, arguments);\n}\n\n_c2 = AutoWeather;\n\nfunction _AutoWeather() {\n  var _s3 = $RefreshSig$();\n\n  _AutoWeather = _asyncToGenerator(_s3( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(props) {\n    var _s2 = $RefreshSig$();\n\n    var _aproximateLocation, _useState, currentLocation, setCurrentLocation;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _s3();\n\n            _aproximateLocation = false;\n            _useState = useState({\n              lat: 0,\n              lng: 0\n            }), currentLocation = _useState[0], setCurrentLocation = _useState[1];\n            useLayoutEffect(_s2(function () {\n              var _s = $RefreshSig$();\n\n              _s2();\n\n              var query = console.log(props === null || props === void 0 ? void 0 : props.query);\n\n              if (query !== undefined) {} else {}\n\n              /*#__PURE__*/\n              _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return navigator.geolocation.getCurrentPosition(function (b) {\n                          return setCurrentLocation({\n                            lat: b.coords.latitude,\n                            lng: b.coords.longitude\n                          });\n                        });\n\n                      case 2:\n                        return _context.abrupt(\"return\", _context.sent);\n\n                      case 3:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              if (currentLocation.lat === 0 && currentLocation.lng === 0) {\n                _aproximateLocation = true;\n                useIPWeather().then(function (result) {\n                  return setCurrentLocation(result);\n                });\n              }\n\n              /*#__PURE__*/\n              _asyncToGenerator(_s( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        _s();\n\n                        _context2.next = 3;\n                        return useWeatherCordinates(currentLocation);\n\n                      case 3:\n                        return _context2.abrupt(\"return\", _context2.sent);\n\n                      case 4:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2);\n              }), \"ED1WSfPuAutyyotkH0ImvhNO/X4=\", false, function () {\n                return [useWeatherCordinates];\n              }));\n            }, \"YDB0Q8+AkUM/Gvh+6KIywZxTBjo=\", false, function () {\n              return [useIPWeather];\n            }), [currentLocation]);\n            return _context3.abrupt(\"return\", currentLocation);\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }), \"rfSGFJGNMZvwjMEak/PahORaec8=\"));\n  return _AutoWeather.apply(this, arguments);\n}\n\n_c = AutoWeather;\nexport default AutoWeather;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AutoWeather\");\n$RefreshReg$(_c2, \"AutoWeather\");","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/hooks/useAutoWeather.tsx"],"names":["useLayoutEffect","useState","useIPWeather","useWeatherCordinates","AutoWeather","props","_aproximateLocation","lat","lng","currentLocation","setCurrentLocation","query","console","log","undefined","navigator","geolocation","getCurrentPosition","b","coords","latitude","longitude","then","result"],"mappings":";;AAAA,SAAoBA,eAApB,EAAqCC,QAArC,QAAqD,OAArD;AAEA,SAASC,YAAT,EAAuBC,oBAAvB,QAAmD,eAAnD;;SAEeC,W;;;;MAAAA,W;;;;;8EAAf,kBAA2BC,KAA3B;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACMC,YAAAA,mBADN,GAC4B,KAD5B;AAAA,wBAEgDL,QAAQ,CAAgB;AACpEM,cAAAA,GAAG,EAAE,CAD+D;AAEpEC,cAAAA,GAAG,EAAE;AAF+D,aAAhB,CAFxD,EAESC,eAFT,iBAE0BC,kBAF1B;AAOEV,YAAAA,eAAe,KAAC,YAAM;AAAA;;AAAA;;AACpB,kBAAMW,KAAK,GAAGC,OAAO,CAACC,GAAR,CAAYR,KAAZ,aAAYA,KAAZ,uBAAYA,KAAK,CAAEM,KAAnB,CAAd;;AAEA,kBAAIA,KAAK,KAAKG,SAAd,EAAyB,CACxB,CADD,MACO,CACN;;AAED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACeC,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAACC,CAAD;AAAA,iCACpDR,kBAAkB,CAAC;AACjBH,4BAAAA,GAAG,EAAEW,CAAC,CAACC,MAAF,CAASC,QADG;AAEjBZ,4BAAAA,GAAG,EAAEU,CAAC,CAACC,MAAF,CAASE;AAFG,2BAAD,CADkC;AAAA,yBAAzC,CADf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASA,kBAAIZ,eAAe,CAACF,GAAhB,KAAwB,CAAxB,IAA6BE,eAAe,CAACD,GAAhB,KAAwB,CAAzD,EAA4D;AAC1DF,gBAAAA,mBAAmB,GAAG,IAAtB;AACAJ,gBAAAA,YAAY,GAAGoB,IAAf,CAAoB,UAACC,MAAD,EAAY;AAC9B,yBAAOb,kBAAkB,CAACa,MAAD,CAAzB;AACD,iBAFD;AAGD;;AACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAAkBpB,oBAAoB,CAACM,eAAD,CAAtC;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAkBN,oBAAlB;AAAA;AACD,aAvBc;AAAA,sBAkBXD,YAlBW;AAAA,gBAuBZ,CAACO,eAAD,CAvBY,CAAf;AAPF,8CAgCSA,eAhCT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;KAAeL,W;AAmCf,eAAeA,WAAf","sourcesContent":["import { useEffect, useLayoutEffect, useState } from \"react\";\nimport { GeoCordinates } from \"../interfaces/types\";\nimport { useIPWeather, useWeatherCordinates } from \"./use-weather\";\n\nasync function AutoWeather(props?: { query: string }) {\n  let _aproximateLocation = false;\n  const [currentLocation, setCurrentLocation] = useState<GeoCordinates>({\n    lat: 0,\n    lng: 0,\n  });\n\n  useLayoutEffect(() => {\n    const query = console.log(props?.query);\n\n    if (query !== undefined) {\n    } else {\n    }\n\n    async () => {\n      return await navigator.geolocation.getCurrentPosition((b) =>\n        setCurrentLocation({\n          lat: b.coords.latitude,\n          lng: b.coords.longitude,\n        })\n      );\n    };\n\n    if (currentLocation.lat === 0 && currentLocation.lng === 0) {\n      _aproximateLocation = true;\n      useIPWeather().then((result) => {\n        return setCurrentLocation(result);\n      });\n    }\n    async () => await useWeatherCordinates(currentLocation);\n  }, [currentLocation]);\n\n  return currentLocation;\n}\n\nexport default AutoWeather;\n"]},"metadata":{},"sourceType":"module"}