{"ast":null,"code":"import _regeneratorRuntime from \"/Users/dannylodangel/Documents/repos/plat_weather/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/dannylodangel/Documents/repos/plat_weather/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { useEffect, useState } from \"react\";\nimport { useIPWeather, useWeatherCordinates } from \"./use-weather\";\n\nfunction AutoWeather() {\n  return _AutoWeather.apply(this, arguments);\n}\n\n_c2 = AutoWeather;\n\nfunction _AutoWeather() {\n  var _s2 = $RefreshSig$();\n\n  _AutoWeather = _asyncToGenerator(_s2( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var _s = $RefreshSig$();\n\n    var _aproximateLocation, _useState, currentLocation, setCurrentLocation, _useState2, weather, setWeather, _useState3, loading, setLoading;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _s2();\n\n            _aproximateLocation = false;\n            _useState = useState({\n              lat: 0,\n              lng: 0\n            }), currentLocation = _useState[0], setCurrentLocation = _useState[1];\n            _useState2 = useState(), weather = _useState2[0], setWeather = _useState2[1];\n            _useState3 = useState(true), loading = _useState3[0], setLoading = _useState3[1];\n            useEffect(_s(function () {\n              _s();\n\n              /*#__PURE__*/\n              _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return navigator.geolocation.getCurrentPosition(function (b) {\n                          return setCurrentLocation({\n                            lat: b.coords.latitude,\n                            lng: b.coords.longitude\n                          });\n                        });\n\n                      case 2:\n                        return _context.abrupt(\"return\", _context.sent);\n\n                      case 3:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              if (currentLocation.lat === 0 && currentLocation.lng === 0) {\n                _aproximateLocation = true;\n                useIPWeather().then(function (result) {\n                  return setCurrentLocation(result);\n                });\n              }\n\n              setLoading(false);\n              useWeatherCordinates(currentLocation).then(function (result) {\n                return setWeather(result);\n              });\n            }, \"54TbCV7Ho8g9rEtp9cVO4jBzpig=\", false, function () {\n              return [useIPWeather, useWeatherCordinates];\n            }), []);\n            return _context2.abrupt(\"return\", currentLocation);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }), \"3/KKT+z3/j5xp1RHP9feBfaePbA=\"));\n  return _AutoWeather.apply(this, arguments);\n}\n\n_c = AutoWeather;\nexport default AutoWeather;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AutoWeather\");\n$RefreshReg$(_c2, \"AutoWeather\");","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/hooks/useAutoWeather.tsx"],"names":["useEffect","useState","useIPWeather","useWeatherCordinates","AutoWeather","_aproximateLocation","lat","lng","currentLocation","setCurrentLocation","weather","setWeather","loading","setLoading","navigator","geolocation","getCurrentPosition","b","coords","latitude","longitude","then","result"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,SAASC,YAAT,EAAuBC,oBAAvB,QAAmD,eAAnD;;SAEeC,W;;;;MAAAA,W;;;;;8EAAf;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACMC,YAAAA,mBADN,GAC4B,KAD5B;AAAA,wBAEgDJ,QAAQ,CAAgB;AACpEK,cAAAA,GAAG,EAAE,CAD+D;AAEpEC,cAAAA,GAAG,EAAE;AAF+D,aAAhB,CAFxD,EAESC,eAFT,iBAE0BC,kBAF1B;AAAA,yBAMgCR,QAAQ,EANxC,EAMSS,OANT,kBAMkBC,UANlB;AAAA,yBAOgCV,QAAQ,CAAC,IAAD,CAPxC,EAOSW,OAPT,kBAOkBC,UAPlB;AASEb,YAAAA,SAAS,IAAC,YAAM;AAAA;;AACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACQc,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAACC,CAAD;AAAA,iCAC7CR,kBAAkB,CAAC;AACjBH,4BAAAA,GAAG,EAAEW,CAAC,CAACC,MAAF,CAASC,QADG;AAEjBZ,4BAAAA,GAAG,EAAEU,CAAC,CAACC,MAAF,CAASE;AAFG,2BAAD,CAD2B;AAAA,yBAAzC,CADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,kBAAIZ,eAAe,CAACF,GAAhB,KAAwB,CAAxB,IAA6BE,eAAe,CAACD,GAAhB,KAAwB,CAAzD,EAA4D;AAC1DF,gBAAAA,mBAAmB,GAAG,IAAtB;AACAH,gBAAAA,YAAY,GAAGmB,IAAf,CAAoB,UAACC,MAAD,EAAY;AAC9B,yBAAOb,kBAAkB,CAACa,MAAD,CAAzB;AACD,iBAFD;AAGD;;AAEDT,cAAAA,UAAU,CAAC,KAAD,CAAV;AACAV,cAAAA,oBAAoB,CAACK,eAAD,CAApB,CAAsCa,IAAtC,CAA2C,UAACC,MAAD;AAAA,uBAAYX,UAAU,CAACW,MAAD,CAAtB;AAAA,eAA3C;AACD,aAlBQ;AAAA,sBAWLpB,YAXK,EAiBPC,oBAjBO;AAAA,gBAkBN,EAlBM,CAAT;AATF,8CA6BSK,eA7BT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;KAAeJ,W;AAgCf,eAAeA,WAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { GeoCordinates } from \"../interfaces/types\";\nimport { useIPWeather, useWeatherCordinates } from \"./use-weather\";\n\nasync function AutoWeather() {\n  let _aproximateLocation = false;\n  const [currentLocation, setCurrentLocation] = useState<GeoCordinates>({\n    lat: 0,\n    lng: 0,\n  });\n  const [weather, setWeather] = useState<any>();\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    async () =>\n      await navigator.geolocation.getCurrentPosition((b) =>\n        setCurrentLocation({\n          lat: b.coords.latitude,\n          lng: b.coords.longitude,\n        })\n      );\n\n    if (currentLocation.lat === 0 && currentLocation.lng === 0) {\n      _aproximateLocation = true;\n      useIPWeather().then((result) => {\n        return setCurrentLocation(result);\n      });\n    }\n\n    setLoading(false);\n    useWeatherCordinates(currentLocation).then((result) => setWeather(result));\n  }, []);\n\n  return currentLocation;\n}\n\nexport default AutoWeather;\n"]},"metadata":{},"sourceType":"module"}