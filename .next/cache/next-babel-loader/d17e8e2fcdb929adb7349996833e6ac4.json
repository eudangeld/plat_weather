{"ast":null,"code":"// import { useEffect, useLayoutEffect, useState } from \"react\";\n// import { GeoCordinates } from \"../interfaces/types\";\n// import { useIPWeather, useWeatherCordinates } from \"./use-weather\";\n// async function AutoWeather(props?: { query: string }) {\n//   let _aproximateLocation = false;\n//   const [currentLocation, setCurrentLocation] = useState<GeoCordinates>({\n//     lat: 0,\n//     lng: 0,\n//   });\n//   useLayoutEffect(() => {\n//     const query = console.log(props?.query);\n//     if (query !== undefined) {\n//     } else {\n//     }\n//     async () => {\n//       return await navigator.geolocation.getCurrentPosition((b) =>\n//         setCurrentLocation({\n//           lat: b.coords.latitude,\n//           lng: b.coords.longitude,\n//         })\n//       );\n//     };\n//     if (currentLocation.lat === 0 && currentLocation.lng === 0) {\n//       _aproximateLocation = true;\n//       useIPWeather().then((result) => {\n//         return setCurrentLocation(result);\n//       });\n//     }\n//     async () => await useWeatherCordinates(currentLocation);\n//   }, [currentLocation]);\n//   return currentLocation;\n// }\n// export default AutoWeather;","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/hooks/useAutoWeather.tsx"],"names":[],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA","sourcesContent":["// import { useEffect, useLayoutEffect, useState } from \"react\";\n// import { GeoCordinates } from \"../interfaces/types\";\n// import { useIPWeather, useWeatherCordinates } from \"./use-weather\";\n\n// async function AutoWeather(props?: { query: string }) {\n//   let _aproximateLocation = false;\n//   const [currentLocation, setCurrentLocation] = useState<GeoCordinates>({\n//     lat: 0,\n//     lng: 0,\n//   });\n\n//   useLayoutEffect(() => {\n//     const query = console.log(props?.query);\n\n//     if (query !== undefined) {\n//     } else {\n//     }\n\n//     async () => {\n//       return await navigator.geolocation.getCurrentPosition((b) =>\n//         setCurrentLocation({\n//           lat: b.coords.latitude,\n//           lng: b.coords.longitude,\n//         })\n//       );\n//     };\n\n//     if (currentLocation.lat === 0 && currentLocation.lng === 0) {\n//       _aproximateLocation = true;\n//       useIPWeather().then((result) => {\n//         return setCurrentLocation(result);\n//       });\n//     }\n//     async () => await useWeatherCordinates(currentLocation);\n//   }, [currentLocation]);\n\n//   return currentLocation;\n// }\n\n// export default AutoWeather;\n"]},"metadata":{},"sourceType":"script"}