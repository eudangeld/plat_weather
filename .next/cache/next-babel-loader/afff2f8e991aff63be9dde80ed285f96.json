{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport axios from \"axios\";\nexport async function useWeatherCordinates(props) {\n  const _result = await axios.get(`http://api.openweathermap.org/data/2.5/weather?units=metric&lat=${props.lat.toString()}&lon=${props === null || props === void 0 ? void 0 : props.lng.toString()}&appid=${process.env.WEATHER_KEY}`);\n\n  return _result.data;\n}\nexport async function useIPWeather() {\n  const _result = await axios.get(`https://ipgeolocation.abstractapi.com/v1/?api_key=${process.env.IPLOCATION_KEY}`);\n\n  return {\n    lat: _result.data.latitude,\n    lng: _result.data.longitude\n  };\n}\nexport function useFriendStatus() {\n  let _aproximateLocation = false;\n  const {\n    0: currentLocation,\n    1: setCurrentLocation\n  } = useState({\n    lat: 0,\n    lng: 0\n  });\n  const {\n    0: weather,\n    1: setWeather\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  useEffect(() => {\n    async () => await navigator.geolocation.getCurrentPosition(b => setCurrentLocation({\n      lat: b.coords.latitude,\n      lng: b.coords.longitude\n    }));\n\n    if (currentLocation.lat === 0 && currentLocation.lng === 0) {\n      async () => {\n        const ip = await useIPWeather();\n\n        const _weather = await useWeatherCordinates(ip);\n\n        console.log(_weather);\n      };\n    }\n  }, []);\n}","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/hooks/use-weather.ts"],"names":["useState","useEffect","axios","useWeatherCordinates","props","_result","get","lat","toString","lng","process","env","WEATHER_KEY","data","useIPWeather","IPLOCATION_KEY","latitude","longitude","useFriendStatus","_aproximateLocation","currentLocation","setCurrentLocation","weather","setWeather","loading","setLoading","navigator","geolocation","getCurrentPosition","b","coords","ip","_weather","console","log"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,OAAO,eAAeC,oBAAf,CACLC,KADK,EAEkB;AAEvB,QAAMC,OAAO,GAAG,MAAMH,KAAK,CAACI,GAAN,CACnB,mEAAkEF,KAAK,CAACG,GAAN,CAAUC,QAAV,EAAqB,QAAOJ,KAA/F,aAA+FA,KAA/F,uBAA+FA,KAAK,CAAEK,GAAP,CAAWD,QAAX,EAAsB,UACnHE,OAAO,CAACC,GAAR,CAAYC,WACb,EAHmB,CAAtB;;AAKA,SAAOP,OAAO,CAACQ,IAAf;AAGD;AAED,OAAO,eAAeC,YAAf,GAAsD;AAC3D,QAAMT,OAAO,GAAG,MAAMH,KAAK,CAACI,GAAN,CACnB,qDAAoDI,OAAO,CAACC,GAAR,CAAYI,cAAe,EAD5D,CAAtB;;AAGA,SAAO;AACLR,IAAAA,GAAG,EAAEF,OAAO,CAACQ,IAAR,CAAaG,QADb;AAELP,IAAAA,GAAG,EAAEJ,OAAO,CAACQ,IAAR,CAAaI;AAFb,GAAP;AAID;AAGD,OAAO,SAASC,eAAT,GAA2B;AAChC,MAAIC,mBAAmB,GAAG,KAA1B;AACA,QAAM;AAAA,OAACC,eAAD;AAAA,OAAkBC;AAAlB,MAAwCrB,QAAQ,CAAgB;AACpEO,IAAAA,GAAG,EAAE,CAD+D;AAEpEE,IAAAA,GAAG,EAAE;AAF+D,GAAhB,CAAtD;AAIA,QAAM;AAAA,OAACa,OAAD;AAAA,OAAUC;AAAV,MAAwBvB,QAAQ,EAAtC;AACA,QAAM;AAAA,OAACwB,OAAD;AAAA,OAAUC;AAAV,MAAwBzB,QAAQ,CAAC,IAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,gBACE,MAAMyB,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,CAAD,IAC7CR,kBAAkB,CAAC;AACjBd,MAAAA,GAAG,EAAEsB,CAAC,CAACC,MAAF,CAASd,QADG;AAEjBP,MAAAA,GAAG,EAAEoB,CAAC,CAACC,MAAF,CAASb;AAFG,KAAD,CADd,CADR;;AAQA,QAAIG,eAAe,CAACb,GAAhB,KAAwB,CAAxB,IAA6Ba,eAAe,CAACX,GAAhB,KAAwB,CAAzD,EAA4D;AAC1D,kBAAY;AACV,cAAMsB,EAAE,GAAG,MAAMjB,YAAY,EAA7B;;AACA,cAAMkB,QAAQ,GAAG,MAAM7B,oBAAoB,CAAC4B,EAAD,CAA3C;;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACD,OAJD;AAKD;AACF,GAhBQ,EAgBN,EAhBM,CAAT;AAiBD","sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport { GeoCordinates, WeatherProps } from \"../interfaces/types\";\n\nexport async function useWeatherCordinates(\n  props: GeoCordinates\n): Promise<WeatherProps> {\n  \n  const _result = await axios.get(\n    `http://api.openweathermap.org/data/2.5/weather?units=metric&lat=${props.lat.toString()}&lon=${props?.lng.toString()}&appid=${\n      process.env.WEATHER_KEY\n    }`\n  );\n  return _result.data;\n\n  \n}\n\nexport async function useIPWeather(): Promise<GeoCordinates> {\n  const _result = await axios.get(\n    `https://ipgeolocation.abstractapi.com/v1/?api_key=${process.env.IPLOCATION_KEY}`\n  );\n  return {\n    lat: _result.data.latitude,\n    lng: _result.data.longitude,\n  };\n}\n\n\nexport function useFriendStatus() {\n  let _aproximateLocation = false;\n  const [currentLocation, setCurrentLocation] = useState<GeoCordinates>({\n    lat: 0,\n    lng: 0,\n  });\n  const [weather, setWeather] = useState<any>();\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    async () =>\n      await navigator.geolocation.getCurrentPosition((b) =>\n        setCurrentLocation({\n          lat: b.coords.latitude,\n          lng: b.coords.longitude,\n        })\n      );\n\n    if (currentLocation.lat === 0 && currentLocation.lng === 0) {\n      async () => {\n        const ip = await useIPWeather();\n        const _weather = await useWeatherCordinates(ip);\n        console.log(_weather);\n      };\n    }\n  }, []);\n}"]},"metadata":{},"sourceType":"module"}