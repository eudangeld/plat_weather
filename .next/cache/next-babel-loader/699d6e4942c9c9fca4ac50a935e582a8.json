{"ast":null,"code":"import _regeneratorRuntime from \"/Users/dannylodangel/Documents/repos/plat_weather/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/dannylodangel/Documents/repos/plat_weather/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s2 = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport axios from \"axios\";\nexport function useWeatherCordinates(_x) {\n  return _useWeatherCordinates.apply(this, arguments);\n}\n\nfunction _useWeatherCordinates() {\n  _useWeatherCordinates = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(props) {\n    var _result;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return axios.get(\"http://api.openweathermap.org/data/2.5/weather?units=metric&lat=\".concat(props.lat.toString(), \"&lon=\").concat(props === null || props === void 0 ? void 0 : props.lng.toString(), \"&appid=\").concat(process.env.WEATHER_KEY));\n\n          case 2:\n            _result = _context3.sent;\n            return _context3.abrupt(\"return\", _result.data);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _useWeatherCordinates.apply(this, arguments);\n}\n\nexport function useIPWeather() {\n  return _useIPWeather.apply(this, arguments);\n}\n\nfunction _useIPWeather() {\n  _useIPWeather = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    var _result;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return axios.get(\"https://ipgeolocation.abstractapi.com/v1/?api_key=\".concat(process.env.IPLOCATION_KEY));\n\n          case 2:\n            _result = _context4.sent;\n            return _context4.abrupt(\"return\", {\n              lat: _result.data.latitude,\n              lng: _result.data.longitude\n            });\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _useIPWeather.apply(this, arguments);\n}\n\nexport function useFriendStatus() {\n  _s2();\n\n  var _aproximateLocation = false;\n\n  var _useState = useState({\n    lat: 0,\n    lng: 0\n  }),\n      currentLocation = _useState[0],\n      setCurrentLocation = _useState[1];\n\n  var _useState2 = useState(),\n      weather = _useState2[0],\n      setWeather = _useState2[1];\n\n  var _useState3 = useState(true),\n      loading = _useState3[0],\n      setLoading = _useState3[1];\n\n  useEffect(function () {\n    /*#__PURE__*/\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return navigator.geolocation.getCurrentPosition(function (b) {\n                return setCurrentLocation({\n                  lat: b.coords.latitude,\n                  lng: b.coords.longitude\n                });\n              });\n\n            case 2:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    if (currentLocation.lat === 0 && currentLocation.lng === 0) {\n      var _s = $RefreshSig$();\n\n      /*#__PURE__*/\n      _asyncToGenerator(_s( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var ip, _weather;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _s();\n\n                _context2.next = 3;\n                return useIPWeather();\n\n              case 3:\n                ip = _context2.sent;\n                _context2.next = 6;\n                return useWeatherCordinates(ip);\n\n              case 6:\n                _weather = _context2.sent;\n                console.log(_weather);\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }), \"54TbCV7Ho8g9rEtp9cVO4jBzpig=\", false, function () {\n        return [useIPWeather, useWeatherCordinates];\n      }));\n    }\n  }, []);\n}\n\n_s2(useFriendStatus, \"3/KKT+z3/j5xp1RHP9feBfaePbA=\");","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/hooks/use-weather.ts"],"names":["useState","useEffect","axios","useWeatherCordinates","props","get","lat","toString","lng","process","env","WEATHER_KEY","_result","data","useIPWeather","IPLOCATION_KEY","latitude","longitude","useFriendStatus","_aproximateLocation","currentLocation","setCurrentLocation","weather","setWeather","loading","setLoading","navigator","geolocation","getCurrentPosition","b","coords","ip","_weather","console","log"],"mappings":";;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,gBAAsBC,oBAAtB;AAAA;AAAA;;;mFAAO,kBACLC,KADK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAIiBF,KAAK,CAACG,GAAN,2EAC+CD,KAAK,CAACE,GAAN,CAAUC,QAAV,EAD/C,kBAC2EH,KAD3E,aAC2EA,KAD3E,uBAC2EA,KAAK,CAAEI,GAAP,CAAWD,QAAX,EAD3E,oBAElBE,OAAO,CAACC,GAAR,CAAYC,WAFM,EAJjB;;AAAA;AAICC,YAAAA,OAJD;AAAA,8CASEA,OAAO,CAACC,IATV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAcP,gBAAsBC,YAAtB;AAAA;AAAA;;;2EAAO;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACiBZ,KAAK,CAACG,GAAN,6DACiCI,OAAO,CAACC,GAAR,CAAYK,cAD7C,EADjB;;AAAA;AACCH,YAAAA,OADD;AAAA,8CAIE;AACLN,cAAAA,GAAG,EAAEM,OAAO,CAACC,IAAR,CAAaG,QADb;AAELR,cAAAA,GAAG,EAAEI,OAAO,CAACC,IAAR,CAAaI;AAFb,aAJF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAWP,OAAO,SAASC,eAAT,GAA2B;AAAA;;AAChC,MAAIC,mBAAmB,GAAG,KAA1B;;AADgC,kBAEcnB,QAAQ,CAAgB;AACpEM,IAAAA,GAAG,EAAE,CAD+D;AAEpEE,IAAAA,GAAG,EAAE;AAF+D,GAAhB,CAFtB;AAAA,MAEzBY,eAFyB;AAAA,MAERC,kBAFQ;;AAAA,mBAMFrB,QAAQ,EANN;AAAA,MAMzBsB,OANyB;AAAA,MAMhBC,UANgB;;AAAA,mBAOFvB,QAAQ,CAAC,IAAD,CAPN;AAAA,MAOzBwB,OAPyB;AAAA,MAOhBC,UAPgB;;AAShCxB,EAAAA,SAAS,CAAC,YAAM;AACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQyB,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAACC,CAAD;AAAA,uBAC7CR,kBAAkB,CAAC;AACjBf,kBAAAA,GAAG,EAAEuB,CAAC,CAACC,MAAF,CAASd,QADG;AAEjBR,kBAAAA,GAAG,EAAEqB,CAAC,CAACC,MAAF,CAASb;AAFG,iBAAD,CAD2B;AAAA,eAAzC,CADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,QAAIG,eAAe,CAACd,GAAhB,KAAwB,CAAxB,IAA6Bc,eAAe,CAACZ,GAAhB,KAAwB,CAAzD,EAA4D;AAAA;;AAC1D;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,uBACmBM,YAAY,EAD/B;;AAAA;AACQiB,gBAAAA,EADR;AAAA;AAAA,uBAEyB5B,oBAAoB,CAAC4B,EAAD,CAF7C;;AAAA;AAEQC,gBAAAA,QAFR;AAGEC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACmBlB,YADnB,EAEyBX,oBAFzB;AAAA;AAKD;AACF,GAhBQ,EAgBN,EAhBM,CAAT;AAiBD;;IA1Bee,e","sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport { GeoCordinates, WeatherProps } from \"../interfaces/types\";\n\nexport async function useWeatherCordinates(\n  props: GeoCordinates\n): Promise<WeatherProps> {\n  \n  const _result = await axios.get(\n    `http://api.openweathermap.org/data/2.5/weather?units=metric&lat=${props.lat.toString()}&lon=${props?.lng.toString()}&appid=${\n      process.env.WEATHER_KEY\n    }`\n  );\n  return _result.data;\n\n  \n}\n\nexport async function useIPWeather(): Promise<GeoCordinates> {\n  const _result = await axios.get(\n    `https://ipgeolocation.abstractapi.com/v1/?api_key=${process.env.IPLOCATION_KEY}`\n  );\n  return {\n    lat: _result.data.latitude,\n    lng: _result.data.longitude,\n  };\n}\n\n\nexport function useFriendStatus() {\n  let _aproximateLocation = false;\n  const [currentLocation, setCurrentLocation] = useState<GeoCordinates>({\n    lat: 0,\n    lng: 0,\n  });\n  const [weather, setWeather] = useState<any>();\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    async () =>\n      await navigator.geolocation.getCurrentPosition((b) =>\n        setCurrentLocation({\n          lat: b.coords.latitude,\n          lng: b.coords.longitude,\n        })\n      );\n\n    if (currentLocation.lat === 0 && currentLocation.lng === 0) {\n      async () => {\n        const ip = await useIPWeather();\n        const _weather = await useWeatherCordinates(ip);\n        console.log(_weather);\n      };\n    }\n  }, []);\n}"]},"metadata":{},"sourceType":"module"}