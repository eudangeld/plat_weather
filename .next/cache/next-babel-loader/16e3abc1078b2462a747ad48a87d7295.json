{"ast":null,"code":"import { useEffect, useState } from \"react\";\nimport { useIPWeather, useWeatherCordinates } from \"./use-weather\";\n\nconst useGeoWeather = () => {\n  let {\n    0: usingGeoIp,\n    1: setGeoIp\n  } = useState(false);\n  const {\n    0: weather,\n    1: setWeather\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  useEffect(() => {\n    let geo;\n\n    async function withBrowserLocation() {\n      navigator.geolocation.getCurrentPosition(b => {\n        setGeoIp(false);\n        return {\n          lat: b.coords.latitude,\n          lng: b.coords.longitude\n        };\n      });\n    }\n\n    async function getLocation() {\n      geo = await withBrowserLocation();\n\n      if (geo === undefined) {\n        geo = await useIPWeather();\n      }\n\n      useWeatherCordinates(geo).then(_weather => {\n        setLoading(false);\n        return setWeather(_weather);\n      });\n    }\n\n    getLocation();\n  }, []);\n  return [weather, loading];\n};\n\nexport default useGeoWeather;","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/hooks/useWeather.tsx"],"names":["useEffect","useState","useIPWeather","useWeatherCordinates","useGeoWeather","usingGeoIp","setGeoIp","weather","setWeather","loading","setLoading","geo","withBrowserLocation","navigator","geolocation","getCurrentPosition","b","lat","coords","latitude","lng","longitude","getLocation","undefined","then","_weather"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,SAASC,YAAT,EAAuBC,oBAAvB,QAAmD,eAAnD;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAC1B,MAAI;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAAyBL,QAAQ,CAAC,KAAD,CAArC;AAEA,QAAM;AAAA,OAACM,OAAD;AAAA,OAAUC;AAAV,MAAwBP,QAAQ,EAAtC;AACA,QAAM;AAAA,OAACQ,OAAD;AAAA,OAAUC;AAAV,MAAwBT,QAAQ,CAAC,IAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,GAAJ;;AACA,mBAAeC,mBAAf,GAAqC;AACnCC,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,CAAD,IAAO;AAC9CV,QAAAA,QAAQ,CAAC,KAAD,CAAR;AACA,eAAO;AACLW,UAAAA,GAAG,EAAED,CAAC,CAACE,MAAF,CAASC,QADT;AAELC,UAAAA,GAAG,EAAEJ,CAAC,CAACE,MAAF,CAASG;AAFT,SAAP;AAID,OAND;AAOD;;AAED,mBAAeC,WAAf,GAA6B;AAC3BX,MAAAA,GAAG,GAAG,MAAMC,mBAAmB,EAA/B;;AACA,UAAID,GAAG,KAAKY,SAAZ,EAAuB;AACrBZ,QAAAA,GAAG,GAAG,MAAMT,YAAY,EAAxB;AACD;;AACDC,MAAAA,oBAAoB,CAACQ,GAAD,CAApB,CAA0Ba,IAA1B,CAAgCC,QAAD,IAAc;AAC3Cf,QAAAA,UAAU,CAAC,KAAD,CAAV;AACA,eAAOF,UAAU,CAACiB,QAAD,CAAjB;AACD,OAHD;AAID;;AAEDH,IAAAA,WAAW;AACZ,GAxBQ,EAwBN,EAxBM,CAAT;AA0BA,SAAO,CAACf,OAAD,EAAUE,OAAV,CAAP;AACD,CAjCD;;AAmCA,eAAeL,aAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { GeoCordinates } from \"../interfaces/types\";\nimport { useIPWeather, useWeatherCordinates } from \"./use-weather\";\n\nconst useGeoWeather = () => {\n  let [usingGeoIp, setGeoIp] = useState(false);\n\n  const [weather, setWeather] = useState<any>();\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    let geo: any;\n    async function withBrowserLocation() {\n      navigator.geolocation.getCurrentPosition((b) => {\n        setGeoIp(false);\n        return {\n          lat: b.coords.latitude,\n          lng: b.coords.longitude,\n        };\n      });\n    }\n\n    async function getLocation() {\n      geo = await withBrowserLocation();\n      if (geo === undefined) {\n        geo = await useIPWeather();\n      }\n      useWeatherCordinates(geo).then((_weather) => {\n        setLoading(false);\n        return setWeather(_weather);\n      });\n    }\n\n    getLocation();\n  }, []);\n\n  return [weather, loading];\n};\n\nexport default useGeoWeather;\n"]},"metadata":{},"sourceType":"module"}