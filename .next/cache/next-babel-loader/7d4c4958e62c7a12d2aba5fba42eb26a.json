{"ast":null,"code":"var _jsxFileName = \"/Users/dannylodangel/Documents/repos/plat_weather/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { useEffect, useState } from \"react\";\nimport { useIPWeather, useWeatherApi } from \"../hooks/use-weather\";\n\nconst Index = _ => {\n  const {\n    0: currentLocation,\n    1: setCurrentLocation\n  } = useState({\n    lat: 0,\n    lng: 0\n  });\n  const {\n    0: weather,\n    1: setWeather\n  } = useState();\n  console.log(_);\n  useEffect(() => {\n    async () => await navigator.geolocation.getCurrentPosition(b => setCurrentLocation({\n      lat: b.coords.latitude,\n      lng: b.coords.longitude\n    }));\n\n    if (currentLocation.lat === 0 && currentLocation.lng === 0) {\n      useIPWeather().then(result => setCurrentLocation(result));\n    }\n\n    useWeatherApi(currentLocation).then(result => setWeather(result));\n  }, [currentLocation]);\n  return __jsx(Layout, _extends({}, newsProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 10\n    }\n  }));\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/pages/index.tsx"],"names":["useEffect","useState","useIPWeather","useWeatherApi","Index","_","currentLocation","setCurrentLocation","lat","lng","weather","setWeather","console","log","navigator","geolocation","getCurrentPosition","b","coords","latitude","longitude","then","result","newsProps"],"mappings":";;;;;;AAEA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,sBAA5C;;AAGA,MAAMC,KAAoB,GAAIC,CAAD,IAAO;AAClC,QAAM;AAAA,OAACC,eAAD;AAAA,OAAkBC;AAAlB,MAAwCN,QAAQ,CAAgB;AACpEO,IAAAA,GAAG,EAAE,CAD+D;AAEpEC,IAAAA,GAAG,EAAE;AAF+D,GAAhB,CAAtD;AAIA,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBV,QAAQ,EAAtC;AAEAW,EAAAA,OAAO,CAACC,GAAR,CAAYR,CAAZ;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd,gBACE,MAAMc,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,CAAD,IAC7CV,kBAAkB,CAAC;AACjBC,MAAAA,GAAG,EAAES,CAAC,CAACC,MAAF,CAASC,QADG;AAEjBV,MAAAA,GAAG,EAAEQ,CAAC,CAACC,MAAF,CAASE;AAFG,KAAD,CADd,CADR;;AAQA,QAAId,eAAe,CAACE,GAAhB,KAAwB,CAAxB,IAA6BF,eAAe,CAACG,GAAhB,KAAwB,CAAzD,EAA4D;AAC1DP,MAAAA,YAAY,GAAGmB,IAAf,CAAqBC,MAAD,IAAYf,kBAAkB,CAACe,MAAD,CAAlD;AACD;;AAEDnB,IAAAA,aAAa,CAACG,eAAD,CAAb,CAA+Be,IAA/B,CAAqCC,MAAD,IAAYX,UAAU,CAACW,MAAD,CAA1D;AACD,GAdQ,EAcN,CAAChB,eAAD,CAdM,CAAT;AAgBA,SAAO,MAAC,MAAD,eAAYiB,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CA1BD;;AA4BA,eAAenB,KAAf","sourcesContent":["import { Box } from \"grommet\";\nimport { NextPage } from \"next\";\nimport { useEffect, useState } from \"react\";\nimport { useIPWeather, useWeatherApi } from \"../hooks/use-weather\";\nimport { GeoCordinates } from \"../interfaces/types\";\n\nconst Index: NextPage<any> = (_) => {\n  const [currentLocation, setCurrentLocation] = useState<GeoCordinates>({\n    lat: 0,\n    lng: 0,\n  });\n  const [weather, setWeather] = useState();\n\n  console.log(_);\n\n  useEffect(() => {\n    async () =>\n      await navigator.geolocation.getCurrentPosition((b) =>\n        setCurrentLocation({\n          lat: b.coords.latitude,\n          lng: b.coords.longitude,\n        })\n      );\n\n    if (currentLocation.lat === 0 && currentLocation.lng === 0) {\n      useIPWeather().then((result) => setCurrentLocation(result));\n    }\n\n    useWeatherApi(currentLocation).then((result) => setWeather(result));\n  }, [currentLocation]);\n\n  return <Layout {...newsProps}></Layout>;\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}