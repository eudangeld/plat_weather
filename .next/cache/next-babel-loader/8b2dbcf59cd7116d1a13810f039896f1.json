{"ast":null,"code":"import _regeneratorRuntime from \"/Users/dannylodangel/Documents/repos/plat_weather/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/dannylodangel/Documents/repos/plat_weather/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from \"axios\";\nexport function useWeatherCordinates(_x) {\n  return _useWeatherCordinates.apply(this, arguments);\n}\n\nfunction _useWeatherCordinates() {\n  _useWeatherCordinates = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(props) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"http://api.openweathermap.org/data/2.5/weather?units=metric&lat=\".concat(props.lng.toString(), \"&lon=\").concat(props === null || props === void 0 ? void 0 : props.lat.toString(), \"&appid=\").concat(process.env.WEATHER_KEY)); // const _result = await axios.get(\n            //   `http://api.openweathermap.org/data/2.5/weather?units=metric&lat=${props.lat.toString()}&lon=${props?.lng.toString()}&appid=${\n            //     process.env.WEATHER_KEY\n            //   }`\n            // );\n\n            return _context.abrupt(\"return\", _result.data);\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _useWeatherCordinates.apply(this, arguments);\n}\n\nexport function useIPWeather() {\n  return _useIPWeather.apply(this, arguments);\n}\n\nfunction _useIPWeather() {\n  _useIPWeather = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var _result;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return axios.get(\"https://ipgeolocation.abstractapi.com/v1/?api_key=\".concat(process.env.IPLOCATION_KEY));\n\n          case 2:\n            _result = _context2.sent;\n            return _context2.abrupt(\"return\", {\n              lat: _result.data.latitude,\n              lng: _result.data.longitude\n            });\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _useIPWeather.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/hooks/use-weather.ts"],"names":["axios","useWeatherCordinates","props","console","log","lng","toString","lat","process","env","WEATHER_KEY","_result","data","useIPWeather","get","IPLOCATION_KEY","latitude","longitude"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,gBAAsBC,oBAAtB;AAAA;AAAA;;;mFAAO,iBACLC,KADK;AAAA;AAAA;AAAA;AAAA;AAGLC,YAAAA,OAAO,CAACC,GAAR,2EACqEF,KAAK,CAACG,GAAN,CAAUC,QAAV,EADrE,kBACiGJ,KADjG,aACiGA,KADjG,uBACiGA,KAAK,CAAEK,GAAP,CAAWD,QAAX,EADjG,oBAEIE,OAAO,CAACC,GAAR,CAAYC,WAFhB,GAHK,CAQL;AACA;AACA;AACA;AACA;;AAZK,6CAaEC,OAAO,CAACC,IAbV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAkBP,gBAAsBC,YAAtB;AAAA;AAAA;;;2EAAO;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACiBb,KAAK,CAACc,GAAN,6DACiCN,OAAO,CAACC,GAAR,CAAYM,cAD7C,EADjB;;AAAA;AACCJ,YAAAA,OADD;AAAA,8CAIE;AACLJ,cAAAA,GAAG,EAAEI,OAAO,CAACC,IAAR,CAAaI,QADb;AAELX,cAAAA,GAAG,EAAEM,OAAO,CAACC,IAAR,CAAaK;AAFb,aAJF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import axios from \"axios\";\nimport { GeoCordinates, WeatherProps } from \"../interfaces/types\";\n\nexport async function useWeatherCordinates(\n  props: GeoCordinates\n): Promise<WeatherProps> {\n  console.log(\n    `http://api.openweathermap.org/data/2.5/weather?units=metric&lat=${props.lng.toString()}&lon=${props?.lat.toString()}&appid=${\n      process.env.WEATHER_KEY\n    }`\n  );\n  // const _result = await axios.get(\n  //   `http://api.openweathermap.org/data/2.5/weather?units=metric&lat=${props.lat.toString()}&lon=${props?.lng.toString()}&appid=${\n  //     process.env.WEATHER_KEY\n  //   }`\n  // );\n  return _result.data;\n\n  \n}\n\nexport async function useIPWeather(): Promise<GeoCordinates> {\n  const _result = await axios.get(\n    `https://ipgeolocation.abstractapi.com/v1/?api_key=${process.env.IPLOCATION_KEY}`\n  );\n  return {\n    lat: _result.data.latitude,\n    lng: _result.data.longitude,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}