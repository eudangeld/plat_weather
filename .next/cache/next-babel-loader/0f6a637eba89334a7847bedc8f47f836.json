{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/dannylodangel/Documents/repos/plat_weather/pages/country/[city].tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box } from \"grommet\";\nimport { route } from \"next/dist/next-server/server/router\";\nimport { useRouter } from \"next/router\";\nimport { useState } from \"react\";\nimport Spinner from \"../../components/spinner\";\nimport useAutoWeather from \"../../hooks/useAutoWeather\";\n\nvar Topic = function Topic(_) {\n  _s();\n\n  var router = useRouter();\n  var query = router.asPath.split(\"/\")[2];\n  console.log(route.arguments);\n\n  var _useState = useState(),\n      weather = _useState[0],\n      setWeather = _useState[1];\n\n  var _useState2 = useState(true),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  useAutoWeather({\n    query: query\n  }).then(function (_result) {\n    setLoading(false);\n    setWeather(_result);\n    return console.log(_result);\n  });\n  console.log(weather);\n\n  if (!loading) {\n    console.log(\"crozour\");\n    return __jsx(Spinner, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return __jsx(Box, {\n    height: \"large\",\n    width: \"large\",\n    align: \"center\",\n    justify: \"center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, __jsx(Spinner, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(Topic, \"A/hPIRPnOmOvjKCOkl7s7FRX8lA=\", false, function () {\n  return [useRouter, useAutoWeather];\n});\n\n_c = Topic;\nexport default Topic;\n\nvar _c;\n\n$RefreshReg$(_c, \"Topic\");","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/pages/country/[city].tsx"],"names":["Box","route","useRouter","useState","Spinner","useAutoWeather","Topic","_","router","query","asPath","split","console","log","arguments","weather","setWeather","loading","setLoading","then","_result"],"mappings":";;;;;;AACA,SAASA,GAAT,QAAoB,SAApB;AAEA,SAASC,KAAT,QAAsB,qCAAtB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAOC,OAAP,MAAoB,0BAApB;AACA,OAAOC,cAAP,MAA2B,4BAA3B;;AAEA,IAAMC,KAAe,GAAG,SAAlBA,KAAkB,CAACC,CAAD,EAAO;AAAA;;AAC7B,MAAMC,MAAM,GAAGN,SAAS,EAAxB;AACA,MAAMO,KAAK,GAAGD,MAAM,CAACE,MAAP,CAAcC,KAAd,CAAoB,GAApB,EAAyB,CAAzB,CAAd;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAK,CAACa,SAAlB;;AAJ6B,kBAKCX,QAAQ,EALT;AAAA,MAKtBY,OALsB;AAAA,MAKbC,UALa;;AAAA,mBAMCb,QAAQ,CAAC,IAAD,CANT;AAAA,MAMtBc,OANsB;AAAA,MAMbC,UANa;;AAQ7Bb,EAAAA,cAAc,CAAC;AAAEI,IAAAA,KAAK,EAALA;AAAF,GAAD,CAAd,CAA0BU,IAA1B,CAA+B,UAACC,OAAD,EAAa;AAC1CF,IAAAA,UAAU,CAAC,KAAD,CAAV;AACAF,IAAAA,UAAU,CAACI,OAAD,CAAV;AACA,WAAOR,OAAO,CAACC,GAAR,CAAYO,OAAZ,CAAP;AACD,GAJD;AAKAR,EAAAA,OAAO,CAACC,GAAR,CAAYE,OAAZ;;AAEA,MAAI,CAACE,OAAL,EAAc;AACZL,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,WAAO,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,SACE,MAAC,GAAD;AAAK,IAAA,MAAM,EAAC,OAAZ;AAAoB,IAAA,KAAK,EAAC,OAA1B;AAAkC,IAAA,KAAK,EAAC,QAAxC;AAAiD,IAAA,OAAO,EAAC,QAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CAzBD;;GAAMP,K;UACWJ,S,EAOfG,c;;;KARIC,K;AA0BN,eAAeA,KAAf","sourcesContent":["import axios from \"axios\";\nimport { Box } from \"grommet\";\nimport { GetStaticProps, NextPage } from \"next\";\nimport { route } from \"next/dist/next-server/server/router\";\nimport { useRouter } from \"next/router\";\nimport { useEffect, useState } from \"react\";\nimport Layout from \"../../components/layout\";\nimport Spinner from \"../../components/spinner\";\nimport useAutoWeather from \"../../hooks/useAutoWeather\";\n\nconst Topic: NextPage = (_) => {\n  const router = useRouter();\n  const query = router.asPath.split(\"/\")[2];\n\n  console.log(route.arguments);\n  const [weather, setWeather] = useState<any>();\n  const [loading, setLoading] = useState(true);\n\n  useAutoWeather({ query }).then((_result) => {\n    setLoading(false);\n    setWeather(_result);\n    return console.log(_result);\n  });\n  console.log(weather);\n\n  if (!loading) {\n    console.log(\"crozour\");\n    return <Spinner />;\n  }\n\n  return (\n    <Box height=\"large\" width=\"large\" align=\"center\" justify=\"center\">\n      <Spinner />\n    </Box>\n  );\n};\nexport default Topic;\n"]},"metadata":{},"sourceType":"module"}