{"ast":null,"code":"import _regeneratorRuntime from \"/Users/dannylodangel/Documents/repos/plat_weather/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/dannylodangel/Documents/repos/plat_weather/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s4 = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\n\nvar useGeoWeather = function useGeoWeather() {\n  _s4();\n\n  var _useState = useState(false),\n      usingGeoIp = _useState[0],\n      setGeoIp = _useState[1];\n\n  var _useState2 = useState(),\n      weather = _useState2[0],\n      setWeather = _useState2[1];\n\n  var _useState3 = useState(true),\n      loading = _useState3[0],\n      setLoading = _useState3[1];\n\n  var _useState4 = useState(),\n      location = _useState4[0],\n      setLocation = _useState4[1];\n\n  useEffect(function () {\n    var geo;\n\n    function withBrowserLocation() {\n      return _withBrowserLocation.apply(this, arguments);\n    }\n\n    function _withBrowserLocation() {\n      _withBrowserLocation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _s = $RefreshSig$();\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log(\"tryin browser\");\n                _context.next = 3;\n                return navigator.geolocation.getCurrentPosition(function (sucess) {\n                  setLocation({\n                    lat: sucess.coords.latitude,\n                    lng: sucess.coords.longitude\n                  });\n                }, _s(function (_) {\n                  _s();\n\n                  setGeoIp(true);\n                  useIPWeather().then(setLocation);\n                }, \"YDB0Q8+AkUM/Gvh+6KIywZxTBjo=\", false, function () {\n                  return [useIPWeather];\n                }));\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _withBrowserLocation.apply(this, arguments);\n    }\n\n    function getWeather() {\n      return _getWeather.apply(this, arguments);\n    }\n\n    function _getWeather() {\n      var _s2 = $RefreshSig$();\n\n      _getWeather = _asyncToGenerator(_s2( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _s2();\n\n                useWeatherCordinates(geo).then(function (_weather) {\n                  setWeather(_weather);\n                  setLoading(false);\n                });\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }), \"ED1WSfPuAutyyotkH0ImvhNO/X4=\", false, function () {\n        return [useWeatherCordinates];\n      }));\n      return _getWeather.apply(this, arguments);\n    }\n\n    function getLocation() {\n      return _getLocation.apply(this, arguments);\n    }\n\n    function _getLocation() {\n      var _s3 = $RefreshSig$();\n\n      _getLocation = _asyncToGenerator(_s3( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _s3();\n\n                _context3.next = 3;\n                return withBrowserLocation();\n\n              case 3:\n                geo = _context3.sent;\n\n                if (!(geo === undefined)) {\n                  _context3.next = 10;\n                  break;\n                }\n\n                console.log(\"bora de ip\");\n                setGeoIp(true);\n                _context3.next = 9;\n                return useIPWeather();\n\n              case 9:\n                geo = _context3.sent;\n\n              case 10:\n                useWeatherCordinates(geo).then(function (_weather) {\n                  setWeather(_weather);\n                  setLoading(false);\n                });\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }), \"54TbCV7Ho8g9rEtp9cVO4jBzpig=\", false, function () {\n        return [useIPWeather, useWeatherCordinates];\n      }));\n      return _getLocation.apply(this, arguments);\n    }\n\n    getLocation();\n  }, []);\n  return [weather, loading, usingGeoIp];\n};\n\n_s4(useGeoWeather, \"p0cGRQP7u75P6Fn3xY7eq0H+Fq4=\");\n\nexport default useGeoWeather;\nexport function useWeatherCordinates(_x) {\n  return _useWeatherCordinates.apply(this, arguments);\n}\n\nfunction _useWeatherCordinates() {\n  _useWeatherCordinates = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(props) {\n    var _result;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return axios.get(\"http://api.openweathermap.org/data/2.5/weather?units=metric&lat=\".concat(props.lat.toString(), \"&lon=\").concat(props === null || props === void 0 ? void 0 : props.lng.toString(), \"&appid=\").concat(process.env.WEATHER_KEY));\n\n          case 2:\n            _result = _context4.sent;\n            return _context4.abrupt(\"return\", _result.data);\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _useWeatherCordinates.apply(this, arguments);\n}\n\nexport function useIPWeather() {\n  return _useIPWeather.apply(this, arguments);\n}\n\nfunction _useIPWeather() {\n  _useIPWeather = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n    var _result;\n\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return axios.get(\"https://ipgeolocation.abstractapi.com/v1/?api_key=\".concat(process.env.IPLOCATION_KEY));\n\n          case 2:\n            _result = _context5.sent;\n            return _context5.abrupt(\"return\", {\n              lat: _result.data.latitude,\n              lng: _result.data.longitude\n            });\n\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _useIPWeather.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/hooks/useWeather.tsx"],"names":["axios","useEffect","useState","useGeoWeather","usingGeoIp","setGeoIp","weather","setWeather","loading","setLoading","location","setLocation","geo","withBrowserLocation","console","log","navigator","geolocation","getCurrentPosition","sucess","lat","coords","latitude","lng","longitude","_","useIPWeather","then","getWeather","useWeatherCordinates","_weather","getLocation","undefined","props","get","toString","process","env","WEATHER_KEY","_result","data","IPLOCATION_KEY"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAGA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAAA;;AAAA,kBACKD,QAAQ,CAAC,KAAD,CADb;AAAA,MACnBE,UADmB;AAAA,MACPC,QADO;;AAAA,mBAEIH,QAAQ,EAFZ;AAAA,MAEnBI,OAFmB;AAAA,MAEVC,UAFU;;AAAA,mBAGIL,QAAQ,CAAC,IAAD,CAHZ;AAAA,MAGnBM,OAHmB;AAAA,MAGVC,UAHU;;AAAA,mBAIMP,QAAQ,EAJd;AAAA,MAInBQ,QAJmB;AAAA,MAITC,WAJS;;AAM1BV,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIW,GAAJ;;AADc,aAECC,mBAFD;AAAA;AAAA;;AAAA;AAAA,sFAEd;AAAA;;AAAA;AAAA;AAAA;AAAA;AACEC,gBAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AADF;AAAA,uBAEQC,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CACJ,UAACC,MAAD,EAAY;AACVR,kBAAAA,WAAW,CAAC;AACVS,oBAAAA,GAAG,EAAED,MAAM,CAACE,MAAP,CAAcC,QADT;AAEVC,oBAAAA,GAAG,EAAEJ,MAAM,CAACE,MAAP,CAAcG;AAFT,mBAAD,CAAX;AAID,iBANG,KAOJ,UAACC,CAAD,EAAO;AAAA;;AACLpB,kBAAAA,QAAQ,CAAC,IAAD,CAAR;AACAqB,kBAAAA,YAAY,GAAGC,IAAf,CAAoBhB,WAApB;AACD,iBAVG;AAAA,0BASFe,YATE;AAAA,mBAFR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFc;AAAA;AAAA;;AAAA,aAkBCE,UAlBD;AAAA;AAAA;;AAAA;AAAA;;AAAA,iFAkBd;AAAA;AAAA;AAAA;AAAA;AAAA;;AACEC,gBAAAA,oBAAoB,CAACjB,GAAD,CAApB,CAA0Be,IAA1B,CAA+B,UAACG,QAAD,EAAc;AAC3CvB,kBAAAA,UAAU,CAACuB,QAAD,CAAV;AACArB,kBAAAA,UAAU,CAAC,KAAD,CAAV;AACD,iBAHD;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAlBc;AAAA,gBAmBZoB,oBAnBY;AAAA;AAAA;AAAA;;AAAA,aAyBCE,WAzBD;AAAA;AAAA;;AAAA;AAAA;;AAAA,kFAyBd;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,uBACclB,mBAAmB,EADjC;;AAAA;AACED,gBAAAA,GADF;;AAAA,sBAEMA,GAAG,KAAKoB,SAFd;AAAA;AAAA;AAAA;;AAGIlB,gBAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAV,gBAAAA,QAAQ,CAAC,IAAD,CAAR;AAJJ;AAAA,uBAKgBqB,YAAY,EAL5B;;AAAA;AAKId,gBAAAA,GALJ;;AAAA;AAOEiB,gBAAAA,oBAAoB,CAACjB,GAAD,CAApB,CAA0Be,IAA1B,CAA+B,UAACG,QAAD,EAAc;AAC3CvB,kBAAAA,UAAU,CAACuB,QAAD,CAAV;AACArB,kBAAAA,UAAU,CAAC,KAAD,CAAV;AACD,iBAHD;;AAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAzBc;AAAA,gBA8BEiB,YA9BF,EAgCZG,oBAhCY;AAAA;AAAA;AAAA;;AAsCdE,IAAAA,WAAW;AACZ,GAvCQ,EAuCN,EAvCM,CAAT;AAyCA,SAAO,CAACzB,OAAD,EAAUE,OAAV,EAAmBJ,UAAnB,CAAP;AACD,CAhDD;;IAAMD,a;;AAkDN,eAAeA,aAAf;AAEA,gBAAsB0B,oBAAtB;AAAA;AAAA;;;mFAAO,kBACLI,KADK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGiBjC,KAAK,CAACkC,GAAN,2EAC+CD,KAAK,CAACb,GAAN,CAAUe,QAAV,EAD/C,kBAC2EF,KAD3E,aAC2EA,KAD3E,uBAC2EA,KAAK,CAAEV,GAAP,CAAWY,QAAX,EAD3E,oBAElBC,OAAO,CAACC,GAAR,CAAYC,WAFM,EAHjB;;AAAA;AAGCC,YAAAA,OAHD;AAAA,8CAQEA,OAAO,CAACC,IARV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAWP,gBAAsBd,YAAtB;AAAA;AAAA;;;2EAAO;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACiB1B,KAAK,CAACkC,GAAN,6DACiCE,OAAO,CAACC,GAAR,CAAYI,cAD7C,EADjB;;AAAA;AACCF,YAAAA,OADD;AAAA,8CAIE;AACLnB,cAAAA,GAAG,EAAEmB,OAAO,CAACC,IAAR,CAAalB,QADb;AAELC,cAAAA,GAAG,EAAEgB,OAAO,CAACC,IAAR,CAAahB;AAFb,aAJF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { GeoCordinates, WeatherProps } from \"../interfaces/types\";\n\nconst useGeoWeather = () => {\n  const [usingGeoIp, setGeoIp] = useState(false);\n  const [weather, setWeather] = useState<any>();\n  const [loading, setLoading] = useState(true);\n  const [location, setLocation] = useState<any>();\n\n  useEffect(() => {\n    let geo: any;\n    async function withBrowserLocation() {\n      console.log(\"tryin browser\");\n      await navigator.geolocation.getCurrentPosition(\n        (sucess) => {\n          setLocation({\n            lat: sucess.coords.latitude,\n            lng: sucess.coords.longitude,\n          });\n        },\n        (_) => {\n          setGeoIp(true);\n          useIPWeather().then(setLocation);\n        }\n      );\n    }\n\n    async function getWeather() {\n      useWeatherCordinates(geo).then((_weather) => {\n        setWeather(_weather);\n        setLoading(false);\n      });\n    }\n\n    async function getLocation() {\n      geo = await withBrowserLocation();\n      if (geo === undefined) {\n        console.log(\"bora de ip\");\n        setGeoIp(true);\n        geo = await useIPWeather();\n      }\n      useWeatherCordinates(geo).then((_weather) => {\n        setWeather(_weather);\n        setLoading(false);\n      });\n    }\n\n    getLocation();\n  }, []);\n\n  return [weather, loading, usingGeoIp];\n};\n\nexport default useGeoWeather;\n\nexport async function useWeatherCordinates(\n  props: GeoCordinates\n): Promise<WeatherProps> {\n  const _result = await axios.get(\n    `http://api.openweathermap.org/data/2.5/weather?units=metric&lat=${props.lat.toString()}&lon=${props?.lng.toString()}&appid=${\n      process.env.WEATHER_KEY\n    }`\n  );\n  return _result.data;\n}\n\nexport async function useIPWeather(): Promise<GeoCordinates> {\n  const _result = await axios.get(\n    `https://ipgeolocation.abstractapi.com/v1/?api_key=${process.env.IPLOCATION_KEY}`\n  );\n  return {\n    lat: _result.data.latitude,\n    lng: _result.data.longitude,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}