{"ast":null,"code":"import _extends from \"/Users/dannylodangel/Documents/repos/plat_weather/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"/Users/dannylodangel/Documents/repos/plat_weather/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/dannylodangel/Documents/repos/plat_weather/pages/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from \"../components/layout\";\nimport Spinner from \"../components/spinner\";\nimport useGeoWeather from \"../hooks/useWeather\";\n\nvar Index = function Index(_) {\n  _s();\n\n  var _useGeoWeather = useGeoWeather(),\n      _useGeoWeather2 = _slicedToArray(_useGeoWeather, 3),\n      weather = _useGeoWeather2[0],\n      loading = _useGeoWeather2[1],\n      usingGeoIp = _useGeoWeather2[2];\n\n  console.log(weather);\n  console.log(loading);\n  console.log(usingGeoIp);\n\n  if (loading) {\n    return __jsx(Spinner, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return __jsx(Layout, _extends({}, weather, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 10\n    }\n  }));\n};\n\n_s(Index, \"U/yl6vBN64XNkqfzOJYsrIryWLM=\", false, function () {\n  return [useGeoWeather];\n});\n\n_c = Index;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/pages/index.tsx"],"names":["Layout","Spinner","useGeoWeather","Index","_","weather","loading","usingGeoIp","console","log"],"mappings":";;;;;;;;;AACA,OAAOA,MAAP,MAAmB,sBAAnB;AAMA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,aAAP,MAA0B,qBAA1B;;AAEA,IAAMC,KAAoB,GAAG,SAAvBA,KAAuB,CAACC,CAAD,EAAO;AAAA;;AAAA,uBACKF,aAAa,EADlB;AAAA;AAAA,MAC3BG,OAD2B;AAAA,MAClBC,OADkB;AAAA,MACTC,UADS;;AAElCC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;;AAEA,MAAID,OAAJ,EAAa;AACX,WAAO,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,SAAO,MAAC,MAAD,eAAYD,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAXD;;GAAMF,K;UACmCD,a;;;KADnCC,K;AAaN,eAAeA,KAAf","sourcesContent":["import { Box, Image } from \"grommet\";\nimport Layout from \"../components/layout\";\nimport { NextPage } from \"next\";\nimport { useEffect, useLayoutEffect, useState } from \"react\";\n\nimport { useIPWeather, useWeatherCordinates } from \"../hooks/use-weather\";\nimport { GeoCordinates } from \"../interfaces/types\";\nimport Spinner from \"../components/spinner\";\nimport useGeoWeather from \"../hooks/useWeather\";\n\nconst Index: NextPage<any> = (_) => {\n  const [weather, loading, usingGeoIp] = useGeoWeather();\n  console.log(weather);\n  console.log(loading);\n  console.log(usingGeoIp);\n\n  if (loading) {\n    return <Spinner />;\n  }\n\n  return <Layout {...weather}></Layout>;\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}