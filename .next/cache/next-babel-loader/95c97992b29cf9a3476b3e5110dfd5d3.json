{"ast":null,"code":"import _slicedToArray from \"/Users/dannylodangel/Documents/repos/plat_weather/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/dannylodangel/Documents/repos/plat_weather/pages/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Spinner from \"../components/spinner\";\nimport useGeoWeather from \"../hooks/useWeather\";\n\nvar Index = function Index(_) {\n  _s();\n\n  // let _aproximateLocation = false;\n  // const [currentLocation, setCurrentLocation] = useState<GeoCordinates>({\n  //   lat: 0,\n  //   lng: 0,\n  // });\n  // const [weather, setWeather] = useState<any>();\n  // const [loading, setLoading] = useState(true);\n  // useLayoutEffect(() => {\n  //   async () =>\n  //     await navigator.geolocation.getCurrentPosition((b) =>\n  //       setCurrentLocation({\n  //         lat: b.coords.latitude,\n  //         lng: b.coords.longitude,\n  //       })\n  //     );\n  //   if (currentLocation.lat === 0 && currentLocation.lng === 0) {\n  //     async () => {\n  //       const ip = await useIPWeather();\n  //       const _weather = await useWeatherCordinates(ip);\n  //       console.log(_weather);\n  //     };\n  //   }\n  // }, []);\n  // console.log(weather);\n  // console.log(currentLocation);\n  var _useGeoWeather = useGeoWeather(),\n      _useGeoWeather2 = _slicedToArray(_useGeoWeather, 3),\n      weather = _useGeoWeather2[0],\n      loading = _useGeoWeather2[1],\n      usingGeoIp = _useGeoWeather2[2];\n\n  console.log(weather);\n  console.log(loading);\n  return __jsx(Spinner, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 10\n    }\n  }); // return <Box></Box>;\n  // return <Layout {...weather}></Layout>;\n};\n\n_s(Index, \"U/yl6vBN64XNkqfzOJYsrIryWLM=\", false, function () {\n  return [useGeoWeather];\n});\n\n_c = Index;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/pages/index.tsx"],"names":["Spinner","useGeoWeather","Index","_","weather","loading","usingGeoIp","console","log"],"mappings":";;;;;;;;AAOA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,aAAP,MAA0B,qBAA1B;;AAEA,IAAMC,KAAoB,GAAG,SAAvBA,KAAuB,CAACC,CAAD,EAAO;AAAA;;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AA5BkC,uBA8BKF,aAAa,EA9BlB;AAAA;AAAA,MA8B3BG,OA9B2B;AAAA,MA8BlBC,OA9BkB;AAAA,MA8BTC,UA9BS;;AAgClCC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AAEA,SAAO,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP,CAnCkC,CAqClC;AAEA;AACD,CAxCD;;GAAMH,K;UA8BmCD,a;;;KA9BnCC,K;AA0CN,eAAeA,KAAf","sourcesContent":["import { Box, Image } from \"grommet\";\nimport Layout from \"../components/layout\";\nimport { NextPage } from \"next\";\nimport { useEffect, useLayoutEffect, useState } from \"react\";\n\nimport { useIPWeather, useWeatherCordinates } from \"../hooks/use-weather\";\nimport { GeoCordinates } from \"../interfaces/types\";\nimport Spinner from \"../components/spinner\";\nimport useGeoWeather from \"../hooks/useWeather\";\n\nconst Index: NextPage<any> = (_) => {\n  // let _aproximateLocation = false;\n  // const [currentLocation, setCurrentLocation] = useState<GeoCordinates>({\n  //   lat: 0,\n  //   lng: 0,\n  // });\n  // const [weather, setWeather] = useState<any>();\n  // const [loading, setLoading] = useState(true);\n\n  // useLayoutEffect(() => {\n  //   async () =>\n  //     await navigator.geolocation.getCurrentPosition((b) =>\n  //       setCurrentLocation({\n  //         lat: b.coords.latitude,\n  //         lng: b.coords.longitude,\n  //       })\n  //     );\n\n  //   if (currentLocation.lat === 0 && currentLocation.lng === 0) {\n  //     async () => {\n  //       const ip = await useIPWeather();\n  //       const _weather = await useWeatherCordinates(ip);\n  //       console.log(_weather);\n  //     };\n  //   }\n  // }, []);\n\n  // console.log(weather);\n  // console.log(currentLocation);\n\n  const [weather, loading, usingGeoIp] = useGeoWeather();\n\n  console.log(weather);\n  console.log(loading);\n\n  return <Spinner />;\n\n  // return <Box></Box>;\n\n  // return <Layout {...weather}></Layout>;\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}