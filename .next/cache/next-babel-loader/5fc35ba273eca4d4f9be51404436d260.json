{"ast":null,"code":"var _jsxFileName = \"/Users/dannylodangel/Documents/repos/plat_weather/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useGeoWeather } from \"../hooks/use-weather\";\nimport Spinner from \"../components/spinner\";\n\nconst Index = _ => {\n  // let _aproximateLocation = false;\n  // const [currentLocation, setCurrentLocation] = useState<GeoCordinates>({\n  //   lat: 0,\n  //   lng: 0,\n  // });\n  // const [weather, setWeather] = useState<any>();\n  // const [loading, setLoading] = useState(true);\n  // useLayoutEffect(() => {\n  //   async () =>\n  //     await navigator.geolocation.getCurrentPosition((b) =>\n  //       setCurrentLocation({\n  //         lat: b.coords.latitude,\n  //         lng: b.coords.longitude,\n  //       })\n  //     );\n  //   if (currentLocation.lat === 0 && currentLocation.lng === 0) {\n  //     async () => {\n  //       const ip = await useIPWeather();\n  //       const _weather = await useWeatherCordinates(ip);\n  //       console.log(_weather);\n  //     };\n  //   }\n  // }, []);\n  // console.log(weather);\n  // console.log(currentLocation);\n  const _weather = useGeoWeather();\n\n  console.log(_weather);\n  return __jsx(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 10\n    }\n  }); // return <Box></Box>;\n  // return <Layout {...weather}></Layout>;\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/pages/index.tsx"],"names":["useGeoWeather","Spinner","Index","_","_weather","console","log"],"mappings":";;;AAIA,SACEA,aADF,QAIO,sBAJP;AAMA,OAAOC,OAAP,MAAoB,uBAApB;;AAEA,MAAMC,KAAoB,GAAIC,CAAD,IAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA,QAAMC,QAAQ,GAAGJ,aAAa,EAA9B;;AAEAK,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AAEA,SAAO,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP,CAlCkC,CAoClC;AAEA;AACD,CAvCD;;AAyCA,eAAeF,KAAf","sourcesContent":["import { Box, Image } from \"grommet\";\nimport Layout from \"../components/layout\";\nimport { NextPage } from \"next\";\nimport { useEffect, useLayoutEffect, useState } from \"react\";\nimport {\n  useGeoWeather,\n  useIPWeather,\n  useWeatherCordinates,\n} from \"../hooks/use-weather\";\nimport { GeoCordinates } from \"../interfaces/types\";\nimport Spinner from \"../components/spinner\";\n\nconst Index: NextPage<any> = (_) => {\n  // let _aproximateLocation = false;\n  // const [currentLocation, setCurrentLocation] = useState<GeoCordinates>({\n  //   lat: 0,\n  //   lng: 0,\n  // });\n  // const [weather, setWeather] = useState<any>();\n  // const [loading, setLoading] = useState(true);\n\n  // useLayoutEffect(() => {\n  //   async () =>\n  //     await navigator.geolocation.getCurrentPosition((b) =>\n  //       setCurrentLocation({\n  //         lat: b.coords.latitude,\n  //         lng: b.coords.longitude,\n  //       })\n  //     );\n\n  //   if (currentLocation.lat === 0 && currentLocation.lng === 0) {\n  //     async () => {\n  //       const ip = await useIPWeather();\n  //       const _weather = await useWeatherCordinates(ip);\n  //       console.log(_weather);\n  //     };\n  //   }\n  // }, []);\n\n  // console.log(weather);\n  // console.log(currentLocation);\n\n  const _weather = useGeoWeather();\n\n  console.log(_weather);\n\n  return <Spinner />;\n\n  // return <Box></Box>;\n\n  // return <Layout {...weather}></Layout>;\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}