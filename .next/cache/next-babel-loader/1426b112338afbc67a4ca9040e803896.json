{"ast":null,"code":"var _jsxFileName = \"/Users/dannylodangel/Documents/repos/plat_weather/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport Layout from \"../components/layout\";\nimport Spinner from \"../components/spinner\";\nimport useGeoWeather from \"../hooks/useWeather\";\n\nconst Index = _ => {\n  const [weather, loading, usingGeoIp] = useGeoWeather();\n\n  if (loading) {\n    return __jsx(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return __jsx(Layout, _extends({}, weather.iplocation = usingGeoIp, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 10\n    }\n  }));\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/pages/index.tsx"],"names":["Layout","Spinner","useGeoWeather","Index","_","weather","loading","usingGeoIp","iplocation"],"mappings":";;;;;;AACA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,aAAP,MAA0B,qBAA1B;;AAEA,MAAMC,KAAoB,GAAIC,CAAD,IAAO;AAClC,QAAM,CAACC,OAAD,EAAUC,OAAV,EAAmBC,UAAnB,IAAiCL,aAAa,EAApD;;AAEA,MAAII,OAAJ,EAAa;AACX,WAAO,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,SAAO,MAAC,MAAD,eAAaD,OAAO,CAACG,UAAR,GAAqBD,UAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CARD;;AAUA,eAAeJ,KAAf","sourcesContent":["import { NextPage } from \"next\";\nimport Layout from \"../components/layout\";\nimport Spinner from \"../components/spinner\";\nimport useGeoWeather from \"../hooks/useWeather\";\n\nconst Index: NextPage<any> = (_) => {\n  const [weather, loading, usingGeoIp] = useGeoWeather();\n\n  if (loading) {\n    return <Spinner />;\n  }\n\n  return <Layout {...(weather.iplocation = usingGeoIp)}></Layout>;\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}