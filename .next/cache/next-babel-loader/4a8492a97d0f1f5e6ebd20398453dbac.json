{"ast":null,"code":"var _jsxFileName = \"/Users/dannylodangel/Documents/repos/plat_weather/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Layout from \"../components/layout\";\nimport Spinner from \"../components/spinner\";\nimport useGeoWeather from \"../hooks/useWeather\";\n\nconst Index = _ => {\n  const [weather, loading, usingGeoIp] = useGeoWeather();\n\n  if (loading) {\n    return __jsx(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 12\n      }\n    });\n  }\n\n  let props = _objectSpread({}, weather);\n\n  props.iplocation = usingGeoIp;\n  return __jsx(Layout, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 10\n    }\n  }));\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/pages/index.tsx"],"names":["Layout","Spinner","useGeoWeather","Index","_","weather","loading","usingGeoIp","props","iplocation"],"mappings":";;;;;;;;;;;;AACA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,aAAP,MAA0B,qBAA1B;;AAGA,MAAMC,KAAoB,GAAIC,CAAD,IAAO;AAClC,QAAM,CAACC,OAAD,EAAUC,OAAV,EAAmBC,UAAnB,IAAiCL,aAAa,EAApD;;AAEA,MAAII,OAAJ,EAAa;AACX,WAAO,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,MAAIE,KAAmB,qBAAQH,OAAR,CAAvB;;AACAG,EAAAA,KAAK,CAACC,UAAN,GAAmBF,UAAnB;AAEA,SAAO,MAAC,MAAD,eAAYC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAXD;;AAaA,eAAeL,KAAf","sourcesContent":["import { NextPage } from \"next\";\nimport Layout from \"../components/layout\";\nimport Spinner from \"../components/spinner\";\nimport useGeoWeather from \"../hooks/useWeather\";\nimport { WeatherProps } from \"../interfaces/types\";\n\nconst Index: NextPage<any> = (_) => {\n  const [weather, loading, usingGeoIp] = useGeoWeather();\n\n  if (loading) {\n    return <Spinner />;\n  }\n\n  let props: WeatherProps = { ...weather };\n  props.iplocation = usingGeoIp;\n\n  return <Layout {...props}></Layout>;\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}