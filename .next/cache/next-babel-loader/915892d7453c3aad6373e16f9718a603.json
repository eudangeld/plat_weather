{"ast":null,"code":"import _regeneratorRuntime from \"/Users/dannylodangel/Documents/repos/plat_weather/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/dannylodangel/Documents/repos/plat_weather/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s2 = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\n\nvar useGeoWeather = function useGeoWeather(city) {\n  _s2();\n\n  var _useState = useState(),\n      cityName = _useState[0],\n      setCityName = _useState[1];\n\n  var _useState2 = useState(false),\n      usingGeoIp = _useState2[0],\n      setGeoIp = _useState2[1];\n\n  var _useState3 = useState(),\n      weather = _useState3[0],\n      setWeather = _useState3[1];\n\n  var _useState4 = useState(true),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState({\n    lat: 0,\n    lng: 0\n  }),\n      location = _useState5[0],\n      setLocation = _useState5[1];\n\n  useEffect(function () {\n    function withBrowserLocation() {\n      return _withBrowserLocation.apply(this, arguments);\n    }\n\n    function _withBrowserLocation() {\n      _withBrowserLocation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var success, _success, error, _error, getWeather, _getWeather;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _getWeather = function _getWeather3() {\n                  var _s = $RefreshSig$();\n\n                  _getWeather = _asyncToGenerator(_s( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(position) {\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            _s();\n\n                            useWeatherCordinates(position).then(function (weather) {\n                              setLocation(position);\n                              setWeather(weather);\n                              setLoading(false);\n                            });\n\n                          case 2:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3);\n                  }), \"ED1WSfPuAutyyotkH0ImvhNO/X4=\", false, function () {\n                    return [useWeatherCordinates];\n                  }));\n                  return _getWeather.apply(this, arguments);\n                };\n\n                getWeather = function _getWeather2(_x3) {\n                  return _getWeather.apply(this, arguments);\n                };\n\n                _error = function _error3() {\n                  _error = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_) {\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            setGeoIp(true);\n                            withIpLocation().then(getWeather);\n\n                          case 2:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2);\n                  }));\n                  return _error.apply(this, arguments);\n                };\n\n                error = function _error2(_x2) {\n                  return _error.apply(this, arguments);\n                };\n\n                _success = function _success3() {\n                  _success = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(pos) {\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return getWeather({\n                              lat: pos.coords.latitude,\n                              lng: pos.coords.longitude\n                            });\n\n                          case 2:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n                  return _success.apply(this, arguments);\n                };\n\n                success = function _success2(_x) {\n                  return _success.apply(this, arguments);\n                };\n\n                console.log(city);\n                navigator.geolocation.getCurrentPosition(success, error);\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n      return _withBrowserLocation.apply(this, arguments);\n    }\n\n    withBrowserLocation();\n  }, []);\n  return [weather, loading, usingGeoIp, location];\n};\n\n_s2(useGeoWeather, \"MTIXmmSX1euWln9lwsNRWJ3ZGLc=\");\n\nexport default useGeoWeather;\nexport function useWeatherCordinates(_x4) {\n  return _useWeatherCordinates.apply(this, arguments);\n}\n\nfunction _useWeatherCordinates() {\n  _useWeatherCordinates = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(props) {\n    var _result;\n\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return axios.get(\"http://api.openweathermap.org/data/2.5/weather?units=metric&lat=\".concat(props.lat.toString(), \"&lon=\").concat(props === null || props === void 0 ? void 0 : props.lng.toString(), \"&appid=\").concat(process.env.WEATHER_KEY));\n\n          case 2:\n            _result = _context5.sent;\n            return _context5.abrupt(\"return\", _result.data);\n\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _useWeatherCordinates.apply(this, arguments);\n}\n\nexport function withIpLocation() {\n  return _withIpLocation.apply(this, arguments);\n}\n\nfunction _withIpLocation() {\n  _withIpLocation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n    var _result;\n\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return axios.get(\"https://ipgeolocation.abstractapi.com/v1/?api_key=\".concat(process.env.IPLOCATION_KEY));\n\n          case 2:\n            _result = _context6.sent;\n            return _context6.abrupt(\"return\", {\n              lat: _result.data.latitude,\n              lng: _result.data.longitude\n            });\n\n          case 4:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _withIpLocation.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/hooks/useWeather.tsx"],"names":["axios","useEffect","useState","useGeoWeather","city","cityName","setCityName","usingGeoIp","setGeoIp","weather","setWeather","loading","setLoading","lat","lng","location","setLocation","withBrowserLocation","success","error","getWeather","position","useWeatherCordinates","then","_","withIpLocation","pos","coords","latitude","longitude","console","log","navigator","geolocation","getCurrentPosition","props","get","toString","process","env","WEATHER_KEY","_result","data","IPLOCATION_KEY"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { GeoCordinates, WeatherProps } from \"../interfaces/types\";\n\nconst useGeoWeather = (city?: string) => {\n  const [cityName, setCityName] = useState<string>();\n  const [usingGeoIp, setGeoIp] = useState(false);\n  const [weather, setWeather] = useState<any>();\n  const [loading, setLoading] = useState(true);\n  const [location, setLocation] = useState<GeoCordinates>({\n    lat: 0,\n    lng: 0,\n  });\n\n  useEffect(() => {\n    async function withBrowserLocation() {\n      console.log(city);\n      navigator.geolocation.getCurrentPosition(success, error);\n\n      async function success(pos: any) {\n        await getWeather({\n          lat: pos.coords.latitude,\n          lng: pos.coords.longitude,\n        });\n      }\n\n      async function error(_: any) {\n        setGeoIp(true);\n        withIpLocation().then(getWeather);\n      }\n\n      async function getWeather(position: any) {\n        useWeatherCordinates(position).then((weather) => {\n          setLocation(position);\n          setWeather(weather);\n          setLoading(false);\n        });\n      }\n    }\n\n    withBrowserLocation();\n  }, []);\n\n  return [weather, loading, usingGeoIp, location];\n};\n\nexport default useGeoWeather;\n\nexport async function useWeatherCordinates(\n  props: GeoCordinates\n): Promise<WeatherProps> {\n  const _result = await axios.get(\n    `http://api.openweathermap.org/data/2.5/weather?units=metric&lat=${props.lat.toString()}&lon=${props?.lng.toString()}&appid=${\n      process.env.WEATHER_KEY\n    }`\n  );\n  return _result.data;\n}\n\nexport async function withIpLocation(): Promise<GeoCordinates> {\n  const _result = await axios.get(\n    `https://ipgeolocation.abstractapi.com/v1/?api_key=${process.env.IPLOCATION_KEY}`\n  );\n  return {\n    lat: _result.data.latitude,\n    lng: _result.data.longitude,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}