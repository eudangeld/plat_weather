{"ast":null,"code":"import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\n\nconst useGeoWeather = () => {\n  const {\n    0: usingGeoIp,\n    1: setGeoIp\n  } = useState(false);\n  const {\n    0: weather,\n    1: setWeather\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: location,\n    1: setLocation\n  } = useState();\n  useEffect(() => {\n    let geo;\n\n    async function withBrowserLocation() {\n      console.log(\"tryin browser\");\n      navigator.geolocation.getCurrentPosition(sucess => {\n        setLocation({\n          lat: sucess.coords.latitude,\n          lng: sucess.coords.longitude\n        });\n      }, _ => {\n        setGeoIp(true);\n        useIPWeather().then(setLocation);\n      });\n    }\n\n    async function getWeather() {\n      useWeatherCordinates(geo).then(_weather => {\n        setWeather(_weather);\n        setLoading(false);\n      });\n    }\n\n    async function getLocation() {\n      geo = await withBrowserLocation();\n\n      if (geo === undefined) {\n        console.log(\"bora de ip\");\n        setGeoIp(true);\n        geo = await useIPWeather();\n      }\n\n      useWeatherCordinates(geo).then(_weather => {\n        setWeather(_weather);\n        setLoading(false);\n      });\n    }\n\n    getLocation();\n  }, []);\n  return [weather, loading, usingGeoIp];\n};\n\nexport default useGeoWeather;\nexport async function useWeatherCordinates(props) {\n  const _result = await axios.get(`http://api.openweathermap.org/data/2.5/weather?units=metric&lat=${props.lat.toString()}&lon=${props === null || props === void 0 ? void 0 : props.lng.toString()}&appid=${process.env.WEATHER_KEY}`);\n\n  return _result.data;\n}\nexport async function useIPWeather() {\n  const _result = await axios.get(`https://ipgeolocation.abstractapi.com/v1/?api_key=${process.env.IPLOCATION_KEY}`);\n\n  return {\n    lat: _result.data.latitude,\n    lng: _result.data.longitude\n  };\n}","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/hooks/useWeather.tsx"],"names":["axios","useEffect","useState","useGeoWeather","usingGeoIp","setGeoIp","weather","setWeather","loading","setLoading","location","setLocation","geo","withBrowserLocation","console","log","navigator","geolocation","getCurrentPosition","sucess","lat","coords","latitude","lng","longitude","_","useIPWeather","then","getWeather","useWeatherCordinates","_weather","getLocation","undefined","props","_result","get","toString","process","env","WEATHER_KEY","data","IPLOCATION_KEY"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAGA,MAAMC,aAAa,GAAG,MAAM;AAC1B,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAAyBH,QAAQ,CAAC,KAAD,CAAvC;AACA,QAAM;AAAA,OAACI,OAAD;AAAA,OAAUC;AAAV,MAAwBL,QAAQ,EAAtC;AACA,QAAM;AAAA,OAACM,OAAD;AAAA,OAAUC;AAAV,MAAwBP,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM;AAAA,OAACQ,QAAD;AAAA,OAAWC;AAAX,MAA0BT,QAAQ,EAAxC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,GAAJ;;AACA,mBAAeC,mBAAf,GAAqC;AACnCC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAC,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CACGC,MAAD,IAAY;AACVR,QAAAA,WAAW,CAAC;AACVS,UAAAA,GAAG,EAAED,MAAM,CAACE,MAAP,CAAcC,QADT;AAEVC,UAAAA,GAAG,EAAEJ,MAAM,CAACE,MAAP,CAAcG;AAFT,SAAD,CAAX;AAID,OANH,EAOGC,CAAD,IAAO;AACLpB,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACAqB,QAAAA,YAAY,GAAGC,IAAf,CAAoBhB,WAApB;AACD,OAVH;AAYD;;AAED,mBAAeiB,UAAf,GAA4B;AAC1BC,MAAAA,oBAAoB,CAACjB,GAAD,CAApB,CAA0Be,IAA1B,CAAgCG,QAAD,IAAc;AAC3CvB,QAAAA,UAAU,CAACuB,QAAD,CAAV;AACArB,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD,OAHD;AAID;;AAED,mBAAesB,WAAf,GAA6B;AAC3BnB,MAAAA,GAAG,GAAG,MAAMC,mBAAmB,EAA/B;;AACA,UAAID,GAAG,KAAKoB,SAAZ,EAAuB;AACrBlB,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAV,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACAO,QAAAA,GAAG,GAAG,MAAMc,YAAY,EAAxB;AACD;;AACDG,MAAAA,oBAAoB,CAACjB,GAAD,CAApB,CAA0Be,IAA1B,CAAgCG,QAAD,IAAc;AAC3CvB,QAAAA,UAAU,CAACuB,QAAD,CAAV;AACArB,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD,OAHD;AAID;;AAEDsB,IAAAA,WAAW;AACZ,GAvCQ,EAuCN,EAvCM,CAAT;AAyCA,SAAO,CAACzB,OAAD,EAAUE,OAAV,EAAmBJ,UAAnB,CAAP;AACD,CAhDD;;AAkDA,eAAeD,aAAf;AAEA,OAAO,eAAe0B,oBAAf,CACLI,KADK,EAEkB;AACvB,QAAMC,OAAO,GAAG,MAAMlC,KAAK,CAACmC,GAAN,CACnB,mEAAkEF,KAAK,CAACb,GAAN,CAAUgB,QAAV,EAAqB,QAAOH,KAA/F,aAA+FA,KAA/F,uBAA+FA,KAAK,CAAEV,GAAP,CAAWa,QAAX,EAAsB,UACnHC,OAAO,CAACC,GAAR,CAAYC,WACb,EAHmB,CAAtB;;AAKA,SAAOL,OAAO,CAACM,IAAf;AACD;AAED,OAAO,eAAed,YAAf,GAAsD;AAC3D,QAAMQ,OAAO,GAAG,MAAMlC,KAAK,CAACmC,GAAN,CACnB,qDAAoDE,OAAO,CAACC,GAAR,CAAYG,cAAe,EAD5D,CAAtB;;AAGA,SAAO;AACLrB,IAAAA,GAAG,EAAEc,OAAO,CAACM,IAAR,CAAalB,QADb;AAELC,IAAAA,GAAG,EAAEW,OAAO,CAACM,IAAR,CAAahB;AAFb,GAAP;AAID","sourcesContent":["import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { GeoCordinates, WeatherProps } from \"../interfaces/types\";\n\nconst useGeoWeather = () => {\n  const [usingGeoIp, setGeoIp] = useState(false);\n  const [weather, setWeather] = useState<any>();\n  const [loading, setLoading] = useState(true);\n  const [location, setLocation] = useState<any>();\n\n  useEffect(() => {\n    let geo: any;\n    async function withBrowserLocation() {\n      console.log(\"tryin browser\");\n      navigator.geolocation.getCurrentPosition(\n        (sucess) => {\n          setLocation({\n            lat: sucess.coords.latitude,\n            lng: sucess.coords.longitude,\n          });\n        },\n        (_) => {\n          setGeoIp(true);\n          useIPWeather().then(setLocation);\n        }\n      );\n    }\n\n    async function getWeather() {\n      useWeatherCordinates(geo).then((_weather) => {\n        setWeather(_weather);\n        setLoading(false);\n      });\n    }\n\n    async function getLocation() {\n      geo = await withBrowserLocation();\n      if (geo === undefined) {\n        console.log(\"bora de ip\");\n        setGeoIp(true);\n        geo = await useIPWeather();\n      }\n      useWeatherCordinates(geo).then((_weather) => {\n        setWeather(_weather);\n        setLoading(false);\n      });\n    }\n\n    getLocation();\n  }, []);\n\n  return [weather, loading, usingGeoIp];\n};\n\nexport default useGeoWeather;\n\nexport async function useWeatherCordinates(\n  props: GeoCordinates\n): Promise<WeatherProps> {\n  const _result = await axios.get(\n    `http://api.openweathermap.org/data/2.5/weather?units=metric&lat=${props.lat.toString()}&lon=${props?.lng.toString()}&appid=${\n      process.env.WEATHER_KEY\n    }`\n  );\n  return _result.data;\n}\n\nexport async function useIPWeather(): Promise<GeoCordinates> {\n  const _result = await axios.get(\n    `https://ipgeolocation.abstractapi.com/v1/?api_key=${process.env.IPLOCATION_KEY}`\n  );\n  return {\n    lat: _result.data.latitude,\n    lng: _result.data.longitude,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}