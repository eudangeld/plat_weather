{"ast":null,"code":"import _regeneratorRuntime from \"/Users/dannylodangel/Documents/repos/plat_weather/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/dannylodangel/Documents/repos/plat_weather/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s2 = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useIPWeather, useWeatherCordinates } from \"./use-weather\";\n\nvar useGeoWeather = function useGeoWeather() {\n  _s2();\n\n  var _aproximateLocation = false;\n\n  var _useState = useState({\n    lat: 0,\n    lng: 0\n  }),\n      currentLocation = _useState[0],\n      setCurrentLocation = _useState[1];\n\n  var _useState2 = useState(),\n      weather = _useState2[0],\n      setWeather = _useState2[1];\n\n  var _useState3 = useState(true),\n      loading = _useState3[0],\n      setLoading = _useState3[1];\n\n  useEffect(function () {\n    var geo;\n\n    function withBrowserLocation() {\n      return _withBrowserLocation.apply(this, arguments);\n    }\n\n    function _withBrowserLocation() {\n      _withBrowserLocation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log(\"trying browser locatio\");\n                navigator.geolocation.getCurrentPosition(function (b) {\n                  return setCurrentLocation({\n                    lat: b.coords.latitude,\n                    lng: b.coords.longitude\n                  });\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _withBrowserLocation.apply(this, arguments);\n    }\n\n    function getLocation() {\n      return _getLocation.apply(this, arguments);\n    }\n\n    function _getLocation() {\n      var _s = $RefreshSig$();\n\n      _getLocation = _asyncToGenerator(_s( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _s();\n\n                _context2.next = 3;\n                return withBrowserLocation();\n\n              case 3:\n                geo = _context2.sent;\n\n                if (!(geo === undefined)) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                _context2.next = 7;\n                return useIPWeather();\n\n              case 7:\n                geo = _context2.sent;\n\n              case 8:\n                useWeatherCordinates(geo).then(function (_weather) {\n                  setLoading(false);\n                  return setWeather(_weather);\n                });\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }), \"54TbCV7Ho8g9rEtp9cVO4jBzpig=\", false, function () {\n        return [useIPWeather, useWeatherCordinates];\n      }));\n      return _getLocation.apply(this, arguments);\n    }\n\n    getLocation();\n  }, []);\n  return [weather, loading];\n};\n\n_s2(useGeoWeather, \"3/KKT+z3/j5xp1RHP9feBfaePbA=\");\n\nexport default useGeoWeather;","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/hooks/useWeather.tsx"],"names":["useEffect","useState","useIPWeather","useWeatherCordinates","useGeoWeather","_aproximateLocation","lat","lng","currentLocation","setCurrentLocation","weather","setWeather","loading","setLoading","geo","withBrowserLocation","console","log","navigator","geolocation","getCurrentPosition","b","coords","latitude","longitude","getLocation","undefined","then","_weather"],"mappings":";;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,SAASC,YAAT,EAAuBC,oBAAvB,QAAmD,eAAnD;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAAA;;AAC1B,MAAIC,mBAAmB,GAAG,KAA1B;;AAD0B,kBAEoBJ,QAAQ,CAAgB;AACpEK,IAAAA,GAAG,EAAE,CAD+D;AAEpEC,IAAAA,GAAG,EAAE;AAF+D,GAAhB,CAF5B;AAAA,MAEnBC,eAFmB;AAAA,MAEFC,kBAFE;;AAAA,mBAMIR,QAAQ,EANZ;AAAA,MAMnBS,OANmB;AAAA,MAMVC,UANU;;AAAA,mBAOIV,QAAQ,CAAC,IAAD,CAPZ;AAAA,MAOnBW,OAPmB;AAAA,MAOVC,UAPU;;AAS1Bb,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIc,GAAJ;;AADc,aAECC,mBAFD;AAAA;AAAA;;AAAA;AAAA,sFAEd;AAAA;AAAA;AAAA;AAAA;AACEC,gBAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAC,gBAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAACC,CAAD,EAAO;AAC9C,yBAAOZ,kBAAkB,CAAC;AACxBH,oBAAAA,GAAG,EAAEe,CAAC,CAACC,MAAF,CAASC,QADU;AAExBhB,oBAAAA,GAAG,EAAEc,CAAC,CAACC,MAAF,CAASE;AAFU,mBAAD,CAAzB;AAID,iBALD;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFc;AAAA;AAAA;;AAAA,aAYCC,WAZD;AAAA;AAAA;;AAAA;AAAA;;AAAA,iFAYd;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,uBACcV,mBAAmB,EADjC;;AAAA;AACED,gBAAAA,GADF;;AAAA,sBAEMA,GAAG,KAAKY,SAFd;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAGgBxB,YAAY,EAH5B;;AAAA;AAGIY,gBAAAA,GAHJ;;AAAA;AAKEX,gBAAAA,oBAAoB,CAACW,GAAD,CAApB,CAA0Ba,IAA1B,CAA+B,UAACC,QAAD,EAAc;AAC3Cf,kBAAAA,UAAU,CAAC,KAAD,CAAV;AACA,yBAAOF,UAAU,CAACiB,QAAD,CAAjB;AACD,iBAHD;;AALF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAZc;AAAA,gBAeE1B,YAfF,EAiBZC,oBAjBY;AAAA;AAAA;AAAA;;AAuBdsB,IAAAA,WAAW;AACZ,GAxBQ,EAwBN,EAxBM,CAAT;AA0BA,SAAO,CAACf,OAAD,EAAUE,OAAV,CAAP;AACD,CApCD;;IAAMR,a;;AAsCN,eAAeA,aAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { GeoCordinates } from \"../interfaces/types\";\nimport { useIPWeather, useWeatherCordinates } from \"./use-weather\";\n\nconst useGeoWeather = () => {\n  let _aproximateLocation = false;\n  const [currentLocation, setCurrentLocation] = useState<GeoCordinates>({\n    lat: 0,\n    lng: 0,\n  });\n  const [weather, setWeather] = useState<any>();\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    let geo: any;\n    async function withBrowserLocation() {\n      console.log(\"trying browser locatio\");\n      navigator.geolocation.getCurrentPosition((b) => {\n        return setCurrentLocation({\n          lat: b.coords.latitude,\n          lng: b.coords.longitude,\n        });\n      });\n    }\n\n    async function getLocation() {\n      geo = await withBrowserLocation();\n      if (geo === undefined) {\n        geo = await useIPWeather();\n      }\n      useWeatherCordinates(geo).then((_weather) => {\n        setLoading(false);\n        return setWeather(_weather);\n      });\n    }\n\n    getLocation();\n  }, []);\n\n  return [weather, loading];\n};\n\nexport default useGeoWeather;\n"]},"metadata":{},"sourceType":"module"}