{"ast":null,"code":"var _jsxFileName = \"/Users/dannylodangel/Documents/repos/plat_weather/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Image } from \"grommet\";\nimport { useEffect, useState } from \"react\";\nimport { useIPWeather, useWeatherCordinates } from \"../hooks/use-weather\";\n\nconst Index = _ => {\n  let _aproximateLocation = false;\n  const {\n    0: currentLocation,\n    1: setCurrentLocation\n  } = useState({\n    lat: 0,\n    lng: 0\n  });\n  const {\n    0: weather,\n    1: setWeather\n  } = useState();\n  useEffect(() => {\n    async () => await navigator.geolocation.getCurrentPosition(b => setCurrentLocation({\n      lat: b.coords.latitude,\n      lng: b.coords.longitude\n    }));\n\n    if (currentLocation.lat === 0 && currentLocation.lng === 0) {\n      _aproximateLocation = true;\n      useIPWeather().then(result => setCurrentLocation(result));\n    }\n\n    useWeatherCordinates(currentLocation).then(result => setWeather(result));\n  }, [currentLocation]);\n\n  let _city = weather === null || weather === void 0 ? void 0 : weather.name;\n\n  let _wind = weather === null || weather === void 0 ? void 0 : weather.wind;\n\n  let _description = weather === null || weather === void 0 ? void 0 : weather.description;\n\n  console.log(_city);\n  console.log(_wind);\n  console.log(_description);\n  return __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, __jsx(Image, {\n    src: \"http://openweathermap.org/img/wn/10d@2x.png\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  })); // return <Layout />;\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/pages/index.tsx"],"names":["Box","Image","useEffect","useState","useIPWeather","useWeatherCordinates","Index","_","_aproximateLocation","currentLocation","setCurrentLocation","lat","lng","weather","setWeather","navigator","geolocation","getCurrentPosition","b","coords","latitude","longitude","then","result","_city","name","_wind","wind","_description","description","console","log"],"mappings":";;;AAAA,SAASA,GAAT,EAAcC,KAAd,QAA2B,SAA3B;AAGA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,YAAT,EAAuBC,oBAAvB,QAAmD,sBAAnD;;AAGA,MAAMC,KAAoB,GAAIC,CAAD,IAAO;AAClC,MAAIC,mBAAmB,GAAG,KAA1B;AACA,QAAM;AAAA,OAACC,eAAD;AAAA,OAAkBC;AAAlB,MAAwCP,QAAQ,CAAgB;AACpEQ,IAAAA,GAAG,EAAE,CAD+D;AAEpEC,IAAAA,GAAG,EAAE;AAF+D,GAAhB,CAAtD;AAIA,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBX,QAAQ,EAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,gBACE,MAAMa,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,CAAD,IAC7CR,kBAAkB,CAAC;AACjBC,MAAAA,GAAG,EAAEO,CAAC,CAACC,MAAF,CAASC,QADG;AAEjBR,MAAAA,GAAG,EAAEM,CAAC,CAACC,MAAF,CAASE;AAFG,KAAD,CADd,CADR;;AAQA,QAAIZ,eAAe,CAACE,GAAhB,KAAwB,CAAxB,IAA6BF,eAAe,CAACG,GAAhB,KAAwB,CAAzD,EAA4D;AAC1DJ,MAAAA,mBAAmB,GAAG,IAAtB;AACAJ,MAAAA,YAAY,GAAGkB,IAAf,CAAqBC,MAAD,IAAYb,kBAAkB,CAACa,MAAD,CAAlD;AACD;;AAEDlB,IAAAA,oBAAoB,CAACI,eAAD,CAApB,CAAsCa,IAAtC,CAA4CC,MAAD,IAAYT,UAAU,CAACS,MAAD,CAAjE;AACD,GAfQ,EAeN,CAACd,eAAD,CAfM,CAAT;;AAiBA,MAAIe,KAAK,GAAGX,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEY,IAArB;;AACA,MAAIC,KAAK,GAAGb,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEc,IAArB;;AACA,MAAIC,YAAY,GAAGf,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEgB,WAA5B;;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYH,YAAZ;AAEA,SACE,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAO,IAAA,GAAG,EAAC,6CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CAjCkC,CAsClC;AACD,CAvCD;;AAyCA,eAAetB,KAAf","sourcesContent":["import { Box, Image } from \"grommet\";\nimport Layout from \"../components/layout\";\nimport { NextPage } from \"next\";\nimport { useEffect, useState } from \"react\";\nimport { useIPWeather, useWeatherCordinates } from \"../hooks/use-weather\";\nimport { GeoCordinates } from \"../interfaces/types\";\n\nconst Index: NextPage<any> = (_) => {\n  let _aproximateLocation = false;\n  const [currentLocation, setCurrentLocation] = useState<GeoCordinates>({\n    lat: 0,\n    lng: 0,\n  });\n  const [weather, setWeather] = useState<any>();\n\n  useEffect(() => {\n    async () =>\n      await navigator.geolocation.getCurrentPosition((b) =>\n        setCurrentLocation({\n          lat: b.coords.latitude,\n          lng: b.coords.longitude,\n        })\n      );\n\n    if (currentLocation.lat === 0 && currentLocation.lng === 0) {\n      _aproximateLocation = true;\n      useIPWeather().then((result) => setCurrentLocation(result));\n    }\n\n    useWeatherCordinates(currentLocation).then((result) => setWeather(result));\n  }, [currentLocation]);\n\n  let _city = weather?.name;\n  let _wind = weather?.wind;\n  let _description = weather?.description;\n\n  console.log(_city);\n  console.log(_wind);\n  console.log(_description);\n\n  return (\n    <Box>\n      <Image src=\"http://openweathermap.org/img/wn/10d@2x.png\" />\n    </Box>\n  );\n  // return <Layout />;\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}