{"ast":null,"code":"import _regeneratorRuntime from \"/Users/dannylodangel/Documents/repos/plat_weather/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/dannylodangel/Documents/repos/plat_weather/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from \"axios\";\nexport function useWeatherCordinates(_x) {\n  return _useWeatherCordinates.apply(this, arguments);\n}\n\nfunction _useWeatherCordinates() {\n  _useWeatherCordinates = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(props) {\n    var _result;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"http://api.openweathermap.org/data/2.5/weather?units=metric&lat=\".concat(props.lng.toString(), \"&lon=\").concat(props === null || props === void 0 ? void 0 : props.lat.toString(), \"&appid=\").concat(process.env.WEATHER_KEY));\n            _context.next = 3;\n            return axios.get(\"http://api.openweathermap.org/data/2.5/weather?units=metric&lat=\".concat(props.lat.toString(), \"&lon=\").concat(props === null || props === void 0 ? void 0 : props.lng.toString(), \"&appid=\").concat(process.env.WEATHER_KEY));\n\n          case 3:\n            _result = _context.sent;\n            return _context.abrupt(\"return\", _result.data);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _useWeatherCordinates.apply(this, arguments);\n}\n\nexport function useIPWeather() {\n  return _useIPWeather.apply(this, arguments);\n}\n\nfunction _useIPWeather() {\n  _useIPWeather = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var _result;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return axios.get(\"https://ipgeolocation.abstractapi.com/v1/?api_key=\".concat(process.env.IPLOCATION_KEY));\n\n          case 2:\n            _result = _context2.sent;\n            return _context2.abrupt(\"return\", {\n              lat: _result.data.latitude,\n              lng: _result.data.longitude\n            });\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _useIPWeather.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/hooks/use-weather.ts"],"names":["axios","useWeatherCordinates","props","console","log","lng","toString","lat","process","env","WEATHER_KEY","get","_result","data","useIPWeather","IPLOCATION_KEY","latitude","longitude"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,gBAAsBC,oBAAtB;AAAA;AAAA;;;mFAAO,iBAAoCC,KAApC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACLC,YAAAA,OAAO,CAACC,GAAR,2EAA+EF,KAAK,CAACG,GAAN,CAAUC,QAAV,EAA/E,kBAA2GJ,KAA3G,aAA2GA,KAA3G,uBAA2GA,KAAK,CAAEK,GAAP,CAAWD,QAAX,EAA3G,oBAA0IE,OAAO,CAACC,GAAR,CAAYC,WAAtJ;AADK;AAAA,mBAEiBV,KAAK,CAC1BW,GADqB,2EAE+CT,KAAK,CAACK,GAAN,CAAUD,QAAV,EAF/C,kBAE2EJ,KAF3E,aAE2EA,KAF3E,uBAE2EA,KAAK,CAAEG,GAAP,CAAWC,QAAX,EAF3E,oBAE0GE,OAAO,CAACC,GAAR,CAAYC,WAFtH,EAFjB;;AAAA;AAECE,YAAAA,OAFD;AAAA,6CAMEA,OAAO,CAACC,IANV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AASP,gBAAsBC,YAAtB;AAAA;AAAA;;;2EAAO;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAELd,KAAK,CACFW,GADH,6DAEyDH,OAAO,CAACC,GAAR,CAAYM,cAFrE,EAFK;;AAAA;AACCH,YAAAA,OADD;AAAA,8CAMI;AACLL,cAAAA,GAAG,EAACK,OAAO,CAACC,IAAR,CAAaG,QADZ;AAELX,cAAAA,GAAG,EAACO,OAAO,CAACC,IAAR,CAAaI;AAFZ,aANJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import axios from \"axios\";\nimport { GeoCordinates, WeatherProps } from \"../interfaces/types\";\n\nexport async function useWeatherCordinates(props: GeoCordinates):WeatherProps {\n  console.log(`http://api.openweathermap.org/data/2.5/weather?units=metric&lat=${props.lng.toString()}&lon=${props?.lat.toString()}&appid=${process.env.WEATHER_KEY}`)\n  const _result = await axios\n  .get(\n    `http://api.openweathermap.org/data/2.5/weather?units=metric&lat=${props.lat.toString()}&lon=${props?.lng.toString()}&appid=${process.env.WEATHER_KEY}`\n    )\n  return _result.data;\n}\n\nexport async function useIPWeather():Promise<GeoCordinates> {\n  const _result = await\n  axios\n    .get(\n      `https://ipgeolocation.abstractapi.com/v1/?api_key=${process.env.IPLOCATION_KEY}`\n    )\n    return {\n      lat:_result.data.latitude,\n      lng:_result.data.longitude\n    };\n    \n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}