{"ast":null,"code":"import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\n\nconst useGeoWeather = () => {\n  const {\n    0: usingGeoIp,\n    1: setGeoIp\n  } = useState(false);\n  const {\n    0: weather,\n    1: setWeather\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: location,\n    1: setLocation\n  } = useState({\n    lat: 0,\n    lng: 0\n  });\n  useEffect(() => {\n    async function withBrowserLocation() {\n      navigator.geolocation.getCurrentPosition( // (sucess) => {\n      //   console.log(\"Sucesss\");\n      //   console.log(sucess);\n      //   return setLocation({\n      //     lat: sucess.coords.latitude,\n      //     lng: sucess.coords.longitude,\n      //   });\n      // },\n      // async (error) => {\n      //   console.log(\"error\");\n      //   setGeoIp(true);\n      //   const _ipLocation = await withIpLocation();\n      //   return setLocation(_ipLocation);\n      // }\n      success, error);\n\n      async function success(pos) {\n        success;\n        setLocation({\n          lat: pos.coords.latitude,\n          lng: pos.coords.longitude\n        });\n        await getWeather();\n      }\n\n      async function error(err) {\n        setGeoIp(true);\n\n        const _ipLocation = await withIpLocation();\n\n        setLocation(_ipLocation);\n        await getWeather();\n      }\n\n      async function getWeather() {\n        console.log(\"get weather\");\n        const weather = await useWeatherCordinates(location);\n        setLoading(false);\n        setWeather(weather);\n      }\n    }\n\n    withBrowserLocation();\n  }, []);\n  return [weather, loading, usingGeoIp];\n};\n\nexport default useGeoWeather;\nexport async function useWeatherCordinates(props) {\n  console.log(props);\n\n  const _result = await axios.get(`http://api.openweathermap.org/data/2.5/weather?units=metric&lat=${props.lat.toString()}&lon=${props === null || props === void 0 ? void 0 : props.lng.toString()}&appid=${process.env.WEATHER_KEY}`);\n\n  return _result.data;\n}\nexport async function withIpLocation() {\n  const _result = await axios.get(`https://ipgeolocation.abstractapi.com/v1/?api_key=${process.env.IPLOCATION_KEY}`);\n\n  return {\n    lat: _result.data.latitude,\n    lng: _result.data.longitude\n  };\n}","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/hooks/useWeather.tsx"],"names":["axios","useEffect","useState","useGeoWeather","usingGeoIp","setGeoIp","weather","setWeather","loading","setLoading","location","setLocation","lat","lng","withBrowserLocation","navigator","geolocation","getCurrentPosition","success","error","pos","coords","latitude","longitude","getWeather","err","_ipLocation","withIpLocation","console","log","useWeatherCordinates","props","_result","get","toString","process","env","WEATHER_KEY","data","IPLOCATION_KEY"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAGA,MAAMC,aAAa,GAAG,MAAM;AAC1B,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAAyBH,QAAQ,CAAC,KAAD,CAAvC;AACA,QAAM;AAAA,OAACI,OAAD;AAAA,OAAUC;AAAV,MAAwBL,QAAQ,EAAtC;AACA,QAAM;AAAA,OAACM,OAAD;AAAA,OAAUC;AAAV,MAAwBP,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM;AAAA,OAACQ,QAAD;AAAA,OAAWC;AAAX,MAA0BT,QAAQ,CAAgB;AACtDU,IAAAA,GAAG,EAAE,CADiD;AAEtDC,IAAAA,GAAG,EAAE;AAFiD,GAAhB,CAAxC;AAKAZ,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAea,mBAAf,GAAqC;AACnCC,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,EACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAC,MAAAA,OAhBF,EAiBEC,KAjBF;;AAoBA,qBAAeD,OAAf,CAAuBE,GAAvB,EAAiC;AAC/BF,QAAAA,OAAO;AACPP,QAAAA,WAAW,CAAC;AACVC,UAAAA,GAAG,EAAEQ,GAAG,CAACC,MAAJ,CAAWC,QADN;AAEVT,UAAAA,GAAG,EAAEO,GAAG,CAACC,MAAJ,CAAWE;AAFN,SAAD,CAAX;AAIA,cAAMC,UAAU,EAAhB;AACD;;AAED,qBAAeL,KAAf,CAAqBM,GAArB,EAA+B;AAC7BpB,QAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,cAAMqB,WAAW,GAAG,MAAMC,cAAc,EAAxC;;AACAhB,QAAAA,WAAW,CAACe,WAAD,CAAX;AACA,cAAMF,UAAU,EAAhB;AACD;;AAED,qBAAeA,UAAf,GAA4B;AAC1BI,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,cAAMvB,OAAO,GAAG,MAAMwB,oBAAoB,CAACpB,QAAD,CAA1C;AACAD,QAAAA,UAAU,CAAC,KAAD,CAAV;AACAF,QAAAA,UAAU,CAACD,OAAD,CAAV;AACD;AACF;;AAEDQ,IAAAA,mBAAmB;AACpB,GA/CQ,EA+CN,EA/CM,CAAT;AAiDA,SAAO,CAACR,OAAD,EAAUE,OAAV,EAAmBJ,UAAnB,CAAP;AACD,CA3DD;;AA6DA,eAAeD,aAAf;AAEA,OAAO,eAAe2B,oBAAf,CACLC,KADK,EAEkB;AACvBH,EAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;;AACA,QAAMC,OAAO,GAAG,MAAMhC,KAAK,CAACiC,GAAN,CACnB,mEAAkEF,KAAK,CAACnB,GAAN,CAAUsB,QAAV,EAAqB,QAAOH,KAA/F,aAA+FA,KAA/F,uBAA+FA,KAAK,CAAElB,GAAP,CAAWqB,QAAX,EAAsB,UACnHC,OAAO,CAACC,GAAR,CAAYC,WACb,EAHmB,CAAtB;;AAKA,SAAOL,OAAO,CAACM,IAAf;AACD;AAED,OAAO,eAAeX,cAAf,GAAwD;AAC7D,QAAMK,OAAO,GAAG,MAAMhC,KAAK,CAACiC,GAAN,CACnB,qDAAoDE,OAAO,CAACC,GAAR,CAAYG,cAAe,EAD5D,CAAtB;;AAGA,SAAO;AACL3B,IAAAA,GAAG,EAAEoB,OAAO,CAACM,IAAR,CAAahB,QADb;AAELT,IAAAA,GAAG,EAAEmB,OAAO,CAACM,IAAR,CAAaf;AAFb,GAAP;AAID","sourcesContent":["import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { GeoCordinates, WeatherProps } from \"../interfaces/types\";\n\nconst useGeoWeather = () => {\n  const [usingGeoIp, setGeoIp] = useState(false);\n  const [weather, setWeather] = useState<any>();\n  const [loading, setLoading] = useState(true);\n  const [location, setLocation] = useState<GeoCordinates>({\n    lat: 0,\n    lng: 0,\n  });\n\n  useEffect(() => {\n    async function withBrowserLocation() {\n      navigator.geolocation.getCurrentPosition(\n        // (sucess) => {\n        //   console.log(\"Sucesss\");\n        //   console.log(sucess);\n        //   return setLocation({\n        //     lat: sucess.coords.latitude,\n        //     lng: sucess.coords.longitude,\n        //   });\n        // },\n        // async (error) => {\n        //   console.log(\"error\");\n        //   setGeoIp(true);\n        //   const _ipLocation = await withIpLocation();\n        //   return setLocation(_ipLocation);\n        // }\n\n        success,\n        error\n      );\n\n      async function success(pos: any) {\n        success;\n        setLocation({\n          lat: pos.coords.latitude,\n          lng: pos.coords.longitude,\n        });\n        await getWeather();\n      }\n\n      async function error(err: any) {\n        setGeoIp(true);\n        const _ipLocation = await withIpLocation();\n        setLocation(_ipLocation);\n        await getWeather();\n      }\n\n      async function getWeather() {\n        console.log(\"get weather\");\n        const weather = await useWeatherCordinates(location);\n        setLoading(false);\n        setWeather(weather);\n      }\n    }\n\n    withBrowserLocation();\n  }, []);\n\n  return [weather, loading, usingGeoIp];\n};\n\nexport default useGeoWeather;\n\nexport async function useWeatherCordinates(\n  props: GeoCordinates\n): Promise<WeatherProps> {\n  console.log(props);\n  const _result = await axios.get(\n    `http://api.openweathermap.org/data/2.5/weather?units=metric&lat=${props.lat.toString()}&lon=${props?.lng.toString()}&appid=${\n      process.env.WEATHER_KEY\n    }`\n  );\n  return _result.data;\n}\n\nexport async function withIpLocation(): Promise<GeoCordinates> {\n  const _result = await axios.get(\n    `https://ipgeolocation.abstractapi.com/v1/?api_key=${process.env.IPLOCATION_KEY}`\n  );\n  return {\n    lat: _result.data.latitude,\n    lng: _result.data.longitude,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}