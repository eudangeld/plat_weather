{"ast":null,"code":"import _regeneratorRuntime from \"/Users/dannylodangel/Documents/repos/plat_weather/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/dannylodangel/Documents/repos/plat_weather/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/dannylodangel/Documents/repos/plat_weather/pages/index.tsx\",\n    _s3 = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box } from \"grommet\";\nimport { useEffect, useState } from \"react\";\nimport { useIPWeather, useWeatherApi } from \"../hooks/use-weather\";\n\nvar Index = function Index(_) {\n  _s3();\n\n  var _s2 = $RefreshSig$();\n\n  var _useState = useState({\n    lat: 0,\n    lng: 0\n  }),\n      currentLocation = _useState[0],\n      setCurrentLocation = _useState[1];\n\n  var _useState2 = useState(),\n      weather = _useState2[0],\n      setWeather = _useState2[1];\n\n  useEffect(_s2(function () {\n    _s2();\n\n    /*#__PURE__*/\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return navigator.geolocation.getCurrentPosition(function (b) {\n                return setCurrentLocation({\n                  lat: b.coords.latitude,\n                  lng: b.coords.longitude\n                });\n              });\n\n            case 2:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    console.log(currentLocation);\n\n    if (currentLocation === undefined || currentLocation === {\n      lat: 0,\n      lng: 0\n    }) {\n      var _s = $RefreshSig$();\n\n      /*#__PURE__*/\n      _asyncToGenerator(_s( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _locationResult;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _s();\n\n                console.log(\"vamos de IP en\");\n                _context2.next = 4;\n                return useIPWeather();\n\n              case 4:\n                _locationResult = _context2.sent;\n                setCurrentLocation(_locationResult);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }), \"YDB0Q8+AkUM/Gvh+6KIywZxTBjo=\", false, function () {\n        return [useIPWeather];\n      }));\n    }\n\n    useWeatherApi(currentLocation).then(function (result) {\n      return setWeather(result);\n    });\n    console.log(weather);\n  }, \"VuHt9p3A1XwUvhqytKfeQJg8sm0=\", false, function () {\n    return [useWeatherApi];\n  }), [currentLocation]); // const _weather = UseWeather(currentLocation);\n  // console.log(_weather);\n\n  return __jsx(Box, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 10\n    }\n  }); // return <Layout {...newsProps}></Layout>;\n};\n\n_s3(Index, \"tF3Q24oicnUKkFfe3oTC/IFSfdU=\");\n\n_c = Index;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/pages/index.tsx"],"names":["Box","useEffect","useState","useIPWeather","useWeatherApi","Index","_","lat","lng","currentLocation","setCurrentLocation","weather","setWeather","navigator","geolocation","getCurrentPosition","b","coords","latitude","longitude","console","log","undefined","_locationResult","then","result"],"mappings":";;;;;;;;;AACA,SAASA,GAAT,QAAoB,SAApB;AAEA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,sBAA5C;;AAGA,IAAMC,KAAe,GAAG,SAAlBA,KAAkB,CAACC,CAAD,EAAO;AAAA;;AAAA;;AAAA,kBACiBJ,QAAQ,CAAgB;AACpEK,IAAAA,GAAG,EAAE,CAD+D;AAEpEC,IAAAA,GAAG,EAAE;AAF+D,GAAhB,CADzB;AAAA,MACtBC,eADsB;AAAA,MACLC,kBADK;;AAAA,mBAKCR,QAAQ,EALT;AAAA,MAKtBS,OALsB;AAAA,MAKbC,UALa;;AAO7BX,EAAAA,SAAS,KAAC,YAAM;AAAA;;AACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQY,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAACC,CAAD;AAAA,uBAC7CN,kBAAkB,CAAC;AACjBH,kBAAAA,GAAG,EAAES,CAAC,CAACC,MAAF,CAASC,QADG;AAEjBV,kBAAAA,GAAG,EAAEQ,CAAC,CAACC,MAAF,CAASE;AAFG,iBAAD,CAD2B;AAAA,eAAzC,CADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQAC,IAAAA,OAAO,CAACC,GAAR,CAAYZ,eAAZ;;AAEA,QACEA,eAAe,KAAKa,SAApB,IACAb,eAAe,KAAK;AAAEF,MAAAA,GAAG,EAAE,CAAP;AAAUC,MAAAA,GAAG,EAAE;AAAf,KAFtB,EAGE;AAAA;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACEY,gBAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AADF;AAAA,uBAEgClB,YAAY,EAF5C;;AAAA;AAEQoB,gBAAAA,eAFR;AAGEb,gBAAAA,kBAAkB,CAACa,eAAD,CAAlB;;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAEgCpB,YAFhC;AAAA;AAKD;;AACDC,IAAAA,aAAa,CAACK,eAAD,CAAb,CAA+Be,IAA/B,CAAoC,UAACC,MAAD;AAAA,aAAYb,UAAU,CAACa,MAAD,CAAtB;AAAA,KAApC;AAEAL,IAAAA,OAAO,CAACC,GAAR,CAAYV,OAAZ;AACD,GAxBQ;AAAA,YAqBPP,aArBO;AAAA,MAwBN,CAACK,eAAD,CAxBM,CAAT,CAP6B,CAiC7B;AAEA;;AAEA,SAAO,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP,CArC6B,CAuC7B;AACD,CAxCD;;IAAMJ,K;;KAAAA,K;AA0CN,eAAeA,KAAf","sourcesContent":["import axios from \"axios\";\nimport { Box } from \"grommet\";\nimport { NextPage } from \"next\";\nimport { useEffect, useState } from \"react\";\nimport { useIPWeather, useWeatherApi } from \"../hooks/use-weather\";\nimport { GeoCordinates } from \"../interfaces/types\";\n\nconst Index: NextPage = (_) => {\n  const [currentLocation, setCurrentLocation] = useState<GeoCordinates>({\n    lat: 0,\n    lng: 0,\n  });\n  const [weather, setWeather] = useState();\n\n  useEffect(() => {\n    async () =>\n      await navigator.geolocation.getCurrentPosition((b) =>\n        setCurrentLocation({\n          lat: b.coords.latitude,\n          lng: b.coords.longitude,\n        })\n      );\n\n    console.log(currentLocation);\n\n    if (\n      currentLocation === undefined ||\n      currentLocation === { lat: 0, lng: 0 }\n    ) {\n      async () => {\n        console.log(\"vamos de IP en\");\n        const _locationResult = await useIPWeather();\n        setCurrentLocation(_locationResult);\n      };\n    }\n    useWeatherApi(currentLocation).then((result) => setWeather(result));\n\n    console.log(weather);\n  }, [currentLocation]);\n\n  // const _weather = UseWeather(currentLocation);\n\n  // console.log(_weather);\n\n  return <Box></Box>;\n\n  // return <Layout {...newsProps}></Layout>;\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}