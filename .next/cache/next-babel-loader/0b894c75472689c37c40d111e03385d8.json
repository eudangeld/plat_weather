{"ast":null,"code":"import _regeneratorRuntime from \"/Users/dannylodangel/Documents/repos/plat_weather/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/dannylodangel/Documents/repos/plat_weather/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s2 = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useIPWeather, useWeatherCordinates } from \"./use-weather\";\n\nfunction useGeoWeather() {\n  _s2();\n\n  var _aproximateLocation = false;\n\n  var _useState = useState({\n    lat: 0,\n    lng: 0\n  }),\n      currentLocation = _useState[0],\n      setCurrentLocation = _useState[1];\n\n  var _useState2 = useState(),\n      weather = _useState2[0],\n      setWeather = _useState2[1];\n\n  var _useState3 = useState(true),\n      loading = _useState3[0],\n      setLoading = _useState3[1];\n\n  useEffect(function () {\n    function withBrowserLocation() {\n      return _withBrowserLocation.apply(this, arguments);\n    }\n\n    function _withBrowserLocation() {\n      _withBrowserLocation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return navigator.geolocation.getCurrentPosition(function (b) {\n                  return setCurrentLocation({\n                    lat: b.coords.latitude,\n                    lng: b.coords.longitude\n                  });\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _withBrowserLocation.apply(this, arguments);\n    }\n\n    function getLocation() {\n      return _getLocation.apply(this, arguments);\n    }\n\n    function _getLocation() {\n      var _s = $RefreshSig$();\n\n      _getLocation = _asyncToGenerator(_s( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var geo;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _s();\n\n                _context2.next = 3;\n                return withBrowserLocation();\n\n              case 3:\n                geo = _context2.sent;\n\n                if (!(geo === undefined)) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                _context2.next = 7;\n                return useIPWeather();\n\n              case 7:\n                geo = _context2.sent;\n\n              case 8:\n                getLocation();\n                useWeatherCordinates(geo).then(function (_weather) {\n                  return setWeather(_weather);\n                });\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }), \"54TbCV7Ho8g9rEtp9cVO4jBzpig=\", false, function () {\n        return [useIPWeather, useWeatherCordinates];\n      }));\n      return _getLocation.apply(this, arguments);\n    }\n  }, []);\n  return weather;\n}\n\n_s2(useGeoWeather, \"3/KKT+z3/j5xp1RHP9feBfaePbA=\");\n\nexport default useGeoWeather;","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/hooks/useWeather.tsx"],"names":["useEffect","useState","useIPWeather","useWeatherCordinates","useGeoWeather","_aproximateLocation","lat","lng","currentLocation","setCurrentLocation","weather","setWeather","loading","setLoading","withBrowserLocation","navigator","geolocation","getCurrentPosition","b","coords","latitude","longitude","getLocation","geo","undefined","then","_weather"],"mappings":";;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,SAASC,YAAT,EAAuBC,oBAAvB,QAAmD,eAAnD;;AAEA,SAASC,aAAT,GAAyB;AAAA;;AACvB,MAAIC,mBAAmB,GAAG,KAA1B;;AADuB,kBAEuBJ,QAAQ,CAAgB;AACpEK,IAAAA,GAAG,EAAE,CAD+D;AAEpEC,IAAAA,GAAG,EAAE;AAF+D,GAAhB,CAF/B;AAAA,MAEhBC,eAFgB;AAAA,MAECC,kBAFD;;AAAA,mBAMOR,QAAQ,EANf;AAAA,MAMhBS,OANgB;AAAA,MAMPC,UANO;;AAAA,mBAOOV,QAAQ,CAAC,IAAD,CAPf;AAAA,MAOhBW,OAPgB;AAAA,MAOPC,UAPO;;AASvBb,EAAAA,SAAS,CAAC,YAAM;AAAA,aACCc,mBADD;AAAA;AAAA;;AAAA;AAAA,sFACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACQC,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAACC,CAAD;AAAA,yBAC7CT,kBAAkB,CAAC;AACjBH,oBAAAA,GAAG,EAAEY,CAAC,CAACC,MAAF,CAASC,QADG;AAEjBb,oBAAAA,GAAG,EAAEW,CAAC,CAACC,MAAF,CAASE;AAFG,mBAAD,CAD2B;AAAA,iBAAzC,CADR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADc;AAAA;AAAA;;AAAA,aAUCC,WAVD;AAAA;AAAA;;AAAA;AAAA;;AAAA,iFAUd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,uBACuBR,mBAAmB,EAD1C;;AAAA;AACMS,gBAAAA,GADN;;AAAA,sBAEMA,GAAG,KAAKC,SAFd;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAGgBtB,YAAY,EAH5B;;AAAA;AAGIqB,gBAAAA,GAHJ;;AAAA;AAMED,gBAAAA,WAAW;AAEXnB,gBAAAA,oBAAoB,CAACoB,GAAD,CAApB,CAA0BE,IAA1B,CAA+B,UAACC,QAAD;AAAA,yBAAcf,UAAU,CAACe,QAAD,CAAxB;AAAA,iBAA/B;;AARF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAVc;AAAA,gBAaExB,YAbF,EAkBZC,oBAlBY;AAAA;AAAA;AAAA;AAoBf,GApBQ,EAoBN,EApBM,CAAT;AAsBA,SAAOO,OAAP;AACD;;IAhCQN,a;;AAkCT,eAAeA,aAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { GeoCordinates } from \"../interfaces/types\";\nimport { useIPWeather, useWeatherCordinates } from \"./use-weather\";\n\nfunction useGeoWeather() {\n  let _aproximateLocation = false;\n  const [currentLocation, setCurrentLocation] = useState<GeoCordinates>({\n    lat: 0,\n    lng: 0,\n  });\n  const [weather, setWeather] = useState<any>();\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    async function withBrowserLocation() {\n      await navigator.geolocation.getCurrentPosition((b) =>\n        setCurrentLocation({\n          lat: b.coords.latitude,\n          lng: b.coords.longitude,\n        })\n      );\n    }\n\n    async function getLocation() {\n      let geo: any = await withBrowserLocation();\n      if (geo === undefined) {\n        geo = await useIPWeather();\n      }\n\n      getLocation();\n\n      useWeatherCordinates(geo).then((_weather) => setWeather(_weather));\n    }\n  }, []);\n\n  return weather;\n}\n\nexport default useGeoWeather;\n"]},"metadata":{},"sourceType":"module"}