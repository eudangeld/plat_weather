{"ast":null,"code":"var _jsxFileName = \"/Users/dannylodangel/Documents/repos/plat_weather/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box } from \"grommet\";\nimport { useEffect, useState } from \"react\";\nimport { useIPWeather, useWeatherApi } from \"../hooks/use-weather\";\n\nconst Index = _ => {\n  const {\n    0: currentLocation,\n    1: setCurrentLocation\n  } = useState({\n    lat: 0,\n    lng: 0\n  });\n  const {\n    0: weather,\n    1: setWeather\n  } = useState();\n  useEffect(() => {\n    async () => await navigator.geolocation.getCurrentPosition(b => setCurrentLocation({\n      lat: b.coords.latitude,\n      lng: b.coords.longitude\n    }));\n\n    if (currentLocation.lat === 0 && currentLocation.lng === 0) {\n      useIPWeather().then(result => setCurrentLocation(result));\n    }\n\n    useWeatherApi(currentLocation).then(result => setWeather(result));\n  }, [currentLocation]);\n  return __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 10\n    }\n  }); // return <Layout {...newsProps}></Layout>;\n};\n\nIndex.getInitialProps = async ({\n  req\n}) => {\n  console.log(req);\n  return navigator.geolocation.getCurrentPosition();\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/pages/index.tsx"],"names":["Box","useEffect","useState","useIPWeather","useWeatherApi","Index","_","currentLocation","setCurrentLocation","lat","lng","weather","setWeather","navigator","geolocation","getCurrentPosition","b","coords","latitude","longitude","then","result","getInitialProps","req","console","log"],"mappings":";;;AAAA,SAASA,GAAT,QAAoB,SAApB;AAEA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,sBAA5C;;AAGA,MAAMC,KAAoB,GAAIC,CAAD,IAAO;AAClC,QAAM;AAAA,OAACC,eAAD;AAAA,OAAkBC;AAAlB,MAAwCN,QAAQ,CAAgB;AACpEO,IAAAA,GAAG,EAAE,CAD+D;AAEpEC,IAAAA,GAAG,EAAE;AAF+D,GAAhB,CAAtD;AAIA,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBV,QAAQ,EAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,gBACE,MAAMY,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,CAAD,IAC7CR,kBAAkB,CAAC;AACjBC,MAAAA,GAAG,EAAEO,CAAC,CAACC,MAAF,CAASC,QADG;AAEjBR,MAAAA,GAAG,EAAEM,CAAC,CAACC,MAAF,CAASE;AAFG,KAAD,CADd,CADR;;AAQA,QAAIZ,eAAe,CAACE,GAAhB,KAAwB,CAAxB,IAA6BF,eAAe,CAACG,GAAhB,KAAwB,CAAzD,EAA4D;AAC1DP,MAAAA,YAAY,GAAGiB,IAAf,CAAqBC,MAAD,IAAYb,kBAAkB,CAACa,MAAD,CAAlD;AACD;;AAEDjB,IAAAA,aAAa,CAACG,eAAD,CAAb,CAA+Ba,IAA/B,CAAqCC,MAAD,IAAYT,UAAU,CAACS,MAAD,CAA1D;AACD,GAdQ,EAcN,CAACd,eAAD,CAdM,CAAT;AAgBA,SAAO,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP,CAvBkC,CAyBlC;AACD,CA1BD;;AA4BAF,KAAK,CAACiB,eAAN,GAAwB,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAmB;AACzCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAEA,SAAOV,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,EAAP;AACD,CAJD;;AAMA,eAAeV,KAAf","sourcesContent":["import { Box } from \"grommet\";\nimport { NextPage } from \"next\";\nimport { useEffect, useState } from \"react\";\nimport { useIPWeather, useWeatherApi } from \"../hooks/use-weather\";\nimport { GeoCordinates } from \"../interfaces/types\";\n\nconst Index: NextPage<any> = (_) => {\n  const [currentLocation, setCurrentLocation] = useState<GeoCordinates>({\n    lat: 0,\n    lng: 0,\n  });\n  const [weather, setWeather] = useState();\n\n  useEffect(() => {\n    async () =>\n      await navigator.geolocation.getCurrentPosition((b) =>\n        setCurrentLocation({\n          lat: b.coords.latitude,\n          lng: b.coords.longitude,\n        })\n      );\n\n    if (currentLocation.lat === 0 && currentLocation.lng === 0) {\n      useIPWeather().then((result) => setCurrentLocation(result));\n    }\n\n    useWeatherApi(currentLocation).then((result) => setWeather(result));\n  }, [currentLocation]);\n\n  return <Box></Box>;\n\n  // return <Layout {...newsProps}></Layout>;\n};\n\nIndex.getInitialProps = async ({ req }) => {\n  console.log(req);\n\n  return navigator.geolocation.getCurrentPosition();\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}