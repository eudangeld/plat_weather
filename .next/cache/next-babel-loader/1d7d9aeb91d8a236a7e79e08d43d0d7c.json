{"ast":null,"code":"import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\n\nconst useGeoWeather = () => {\n  const {\n    0: usingGeoIp,\n    1: setGeoIp\n  } = useState(false);\n  const {\n    0: weather,\n    1: setWeather\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: location,\n    1: setLocation\n  } = useState({\n    lat: 0,\n    lng: 0\n  });\n  useEffect(() => {\n    async function withBrowserLocation() {\n      navigator.geolocation.getCurrentPosition(success, error);\n\n      async function success(pos) {\n        await getWeather({\n          lat: pos.coords.latitude,\n          lng: pos.coords.longitude\n        });\n      }\n\n      async function error(err) {\n        console.log(err);\n        withIpLocation().then(getWeather);\n      }\n\n      async function getWeather(position) {\n        useWeatherCordinates(position).then(weather => {\n          setLocation(position);\n          setWeather(weather);\n          setLoading(false);\n        });\n      }\n    }\n\n    withBrowserLocation();\n  }, []);\n  return [weather, loading, usingGeoIp];\n};\n\nexport default useGeoWeather;\nexport async function useWeatherCordinates(props) {\n  console.log(props);\n\n  const _result = await axios.get(`http://api.openweathermap.org/data/2.5/weather?units=metric&lat=${props.lat.toString()}&lon=${props === null || props === void 0 ? void 0 : props.lng.toString()}&appid=${process.env.WEATHER_KEY}`);\n\n  return _result.data;\n}\nexport async function withIpLocation() {\n  const _result = await axios.get(`https://ipgeolocation.abstractapi.com/v1/?api_key=${process.env.IPLOCATION_KEY}`);\n\n  return {\n    lat: _result.data.latitude,\n    lng: _result.data.longitude\n  };\n}","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/hooks/useWeather.tsx"],"names":["axios","useEffect","useState","useGeoWeather","usingGeoIp","setGeoIp","weather","setWeather","loading","setLoading","location","setLocation","lat","lng","withBrowserLocation","navigator","geolocation","getCurrentPosition","success","error","pos","getWeather","coords","latitude","longitude","err","console","log","withIpLocation","then","position","useWeatherCordinates","props","_result","get","toString","process","env","WEATHER_KEY","data","IPLOCATION_KEY"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAGA,MAAMC,aAAa,GAAG,MAAM;AAC1B,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAAyBH,QAAQ,CAAC,KAAD,CAAvC;AACA,QAAM;AAAA,OAACI,OAAD;AAAA,OAAUC;AAAV,MAAwBL,QAAQ,EAAtC;AACA,QAAM;AAAA,OAACM,OAAD;AAAA,OAAUC;AAAV,MAAwBP,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM;AAAA,OAACQ,QAAD;AAAA,OAAWC;AAAX,MAA0BT,QAAQ,CAAgB;AACtDU,IAAAA,GAAG,EAAE,CADiD;AAEtDC,IAAAA,GAAG,EAAE;AAFiD,GAAhB,CAAxC;AAKAZ,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAea,mBAAf,GAAqC;AACnCC,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCC,OAAzC,EAAkDC,KAAlD;;AAEA,qBAAeD,OAAf,CAAuBE,GAAvB,EAAiC;AAC/B,cAAMC,UAAU,CAAC;AACfT,UAAAA,GAAG,EAAEQ,GAAG,CAACE,MAAJ,CAAWC,QADD;AAEfV,UAAAA,GAAG,EAAEO,GAAG,CAACE,MAAJ,CAAWE;AAFD,SAAD,CAAhB;AAID;;AAED,qBAAeL,KAAf,CAAqBM,GAArB,EAA+B;AAC7BC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAG,QAAAA,cAAc,GAAGC,IAAjB,CAAsBR,UAAtB;AACD;;AAED,qBAAeA,UAAf,CAA0BS,QAA1B,EAAyC;AACvCC,QAAAA,oBAAoB,CAACD,QAAD,CAApB,CAA+BD,IAA/B,CAAqCvB,OAAD,IAAa;AAC/CK,UAAAA,WAAW,CAACmB,QAAD,CAAX;AACAvB,UAAAA,UAAU,CAACD,OAAD,CAAV;AACAG,UAAAA,UAAU,CAAC,KAAD,CAAV;AACD,SAJD;AAKD;AACF;;AAEDK,IAAAA,mBAAmB;AACpB,GA1BQ,EA0BN,EA1BM,CAAT;AA4BA,SAAO,CAACR,OAAD,EAAUE,OAAV,EAAmBJ,UAAnB,CAAP;AACD,CAtCD;;AAwCA,eAAeD,aAAf;AAEA,OAAO,eAAe4B,oBAAf,CACLC,KADK,EAEkB;AACvBN,EAAAA,OAAO,CAACC,GAAR,CAAYK,KAAZ;;AACA,QAAMC,OAAO,GAAG,MAAMjC,KAAK,CAACkC,GAAN,CACnB,mEAAkEF,KAAK,CAACpB,GAAN,CAAUuB,QAAV,EAAqB,QAAOH,KAA/F,aAA+FA,KAA/F,uBAA+FA,KAAK,CAAEnB,GAAP,CAAWsB,QAAX,EAAsB,UACnHC,OAAO,CAACC,GAAR,CAAYC,WACb,EAHmB,CAAtB;;AAKA,SAAOL,OAAO,CAACM,IAAf;AACD;AAED,OAAO,eAAeX,cAAf,GAAwD;AAC7D,QAAMK,OAAO,GAAG,MAAMjC,KAAK,CAACkC,GAAN,CACnB,qDAAoDE,OAAO,CAACC,GAAR,CAAYG,cAAe,EAD5D,CAAtB;;AAGA,SAAO;AACL5B,IAAAA,GAAG,EAAEqB,OAAO,CAACM,IAAR,CAAahB,QADb;AAELV,IAAAA,GAAG,EAAEoB,OAAO,CAACM,IAAR,CAAaf;AAFb,GAAP;AAID","sourcesContent":["import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { GeoCordinates, WeatherProps } from \"../interfaces/types\";\n\nconst useGeoWeather = () => {\n  const [usingGeoIp, setGeoIp] = useState(false);\n  const [weather, setWeather] = useState<any>();\n  const [loading, setLoading] = useState(true);\n  const [location, setLocation] = useState<GeoCordinates>({\n    lat: 0,\n    lng: 0,\n  });\n\n  useEffect(() => {\n    async function withBrowserLocation() {\n      navigator.geolocation.getCurrentPosition(success, error);\n\n      async function success(pos: any) {\n        await getWeather({\n          lat: pos.coords.latitude,\n          lng: pos.coords.longitude,\n        });\n      }\n\n      async function error(err: any) {\n        console.log(err);\n        withIpLocation().then(getWeather);\n      }\n\n      async function getWeather(position: any) {\n        useWeatherCordinates(position).then((weather) => {\n          setLocation(position);\n          setWeather(weather);\n          setLoading(false);\n        });\n      }\n    }\n\n    withBrowserLocation();\n  }, []);\n\n  return [weather, loading, usingGeoIp];\n};\n\nexport default useGeoWeather;\n\nexport async function useWeatherCordinates(\n  props: GeoCordinates\n): Promise<WeatherProps> {\n  console.log(props);\n  const _result = await axios.get(\n    `http://api.openweathermap.org/data/2.5/weather?units=metric&lat=${props.lat.toString()}&lon=${props?.lng.toString()}&appid=${\n      process.env.WEATHER_KEY\n    }`\n  );\n  return _result.data;\n}\n\nexport async function withIpLocation(): Promise<GeoCordinates> {\n  const _result = await axios.get(\n    `https://ipgeolocation.abstractapi.com/v1/?api_key=${process.env.IPLOCATION_KEY}`\n  );\n  return {\n    lat: _result.data.latitude,\n    lng: _result.data.longitude,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}