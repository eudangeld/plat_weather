{"ast":null,"code":"import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\n\nconst useGeoWeather = () => {\n  const {\n    0: usingGeoIp,\n    1: setGeoIp\n  } = useState(false);\n  const {\n    0: weather,\n    1: setWeather\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: location,\n    1: setLocation\n  } = useState();\n  useEffect(() => {\n    async function withBrowserLocation() {\n      await navigator.geolocation.getCurrentPosition(sucess => {\n        console.log(sucess);\n        setLocation({\n          lat: sucess.coords.latitude,\n          lng: sucess.coords.longitude\n        });\n      }, async error => {\n        setGeoIp(true);\n\n        const _ipLocation = await withIpLocation();\n\n        console.log(error);\n      });\n    }\n\n    withBrowserLocation().then(() => {\n      useWeatherCordinates(location).then(_weather => {\n        setWeather(_weather);\n        setLoading(false);\n      });\n    });\n  }, []);\n  return [weather, loading, usingGeoIp];\n};\n\nexport default useGeoWeather;\nexport async function useWeatherCordinates(props) {\n  console.log(props);\n\n  const _result = await axios.get(`http://api.openweathermap.org/data/2.5/weather?units=metric&lat=${props.lat.toString()}&lon=${props === null || props === void 0 ? void 0 : props.lng.toString()}&appid=${process.env.WEATHER_KEY}`);\n\n  return _result.data;\n}\nexport async function withIpLocation() {\n  const _result = await axios.get(`https://ipgeolocation.abstractapi.com/v1/?api_key=${process.env.IPLOCATION_KEY}`);\n\n  return {\n    lat: _result.data.latitude,\n    lng: _result.data.longitude\n  };\n}","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/hooks/useWeather.tsx"],"names":["axios","useEffect","useState","useGeoWeather","usingGeoIp","setGeoIp","weather","setWeather","loading","setLoading","location","setLocation","withBrowserLocation","navigator","geolocation","getCurrentPosition","sucess","console","log","lat","coords","latitude","lng","longitude","error","_ipLocation","withIpLocation","then","useWeatherCordinates","_weather","props","_result","get","toString","process","env","WEATHER_KEY","data","IPLOCATION_KEY"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAGA,MAAMC,aAAa,GAAG,MAAM;AAC1B,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAAyBH,QAAQ,CAAC,KAAD,CAAvC;AACA,QAAM;AAAA,OAACI,OAAD;AAAA,OAAUC;AAAV,MAAwBL,QAAQ,EAAtC;AACA,QAAM;AAAA,OAACM,OAAD;AAAA,OAAUC;AAAV,MAAwBP,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM;AAAA,OAACQ,QAAD;AAAA,OAAWC;AAAX,MAA0BT,QAAQ,EAAxC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeW,mBAAf,GAAqC;AACnC,YAAMC,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CACHC,MAAD,IAAY;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACAL,QAAAA,WAAW,CAAC;AACVQ,UAAAA,GAAG,EAAEH,MAAM,CAACI,MAAP,CAAcC,QADT;AAEVC,UAAAA,GAAG,EAAEN,MAAM,CAACI,MAAP,CAAcG;AAFT,SAAD,CAAX;AAID,OAPG,EAQJ,MAAOC,KAAP,IAAiB;AACfnB,QAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,cAAMoB,WAAW,GAAG,MAAMC,cAAc,EAAxC;;AACAT,QAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AACD,OAZG,CAAN;AAcD;;AAEDZ,IAAAA,mBAAmB,GAAGe,IAAtB,CAA2B,MAAM;AAC/BC,MAAAA,oBAAoB,CAAClB,QAAD,CAApB,CAA+BiB,IAA/B,CAAqCE,QAAD,IAAc;AAChDtB,QAAAA,UAAU,CAACsB,QAAD,CAAV;AACApB,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD,OAHD;AAID,KALD;AAMD,GAxBQ,EAwBN,EAxBM,CAAT;AA0BA,SAAO,CAACH,OAAD,EAAUE,OAAV,EAAmBJ,UAAnB,CAAP;AACD,CAjCD;;AAmCA,eAAeD,aAAf;AAEA,OAAO,eAAeyB,oBAAf,CACLE,KADK,EAEkB;AACvBb,EAAAA,OAAO,CAACC,GAAR,CAAYY,KAAZ;;AACA,QAAMC,OAAO,GAAG,MAAM/B,KAAK,CAACgC,GAAN,CACnB,mEAAkEF,KAAK,CAACX,GAAN,CAAUc,QAAV,EAAqB,QAAOH,KAA/F,aAA+FA,KAA/F,uBAA+FA,KAAK,CAAER,GAAP,CAAWW,QAAX,EAAsB,UACnHC,OAAO,CAACC,GAAR,CAAYC,WACb,EAHmB,CAAtB;;AAKA,SAAOL,OAAO,CAACM,IAAf;AACD;AAED,OAAO,eAAeX,cAAf,GAAwD;AAC7D,QAAMK,OAAO,GAAG,MAAM/B,KAAK,CAACgC,GAAN,CACnB,qDAAoDE,OAAO,CAACC,GAAR,CAAYG,cAAe,EAD5D,CAAtB;;AAGA,SAAO;AACLnB,IAAAA,GAAG,EAAEY,OAAO,CAACM,IAAR,CAAahB,QADb;AAELC,IAAAA,GAAG,EAAES,OAAO,CAACM,IAAR,CAAad;AAFb,GAAP;AAID","sourcesContent":["import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { GeoCordinates, WeatherProps } from \"../interfaces/types\";\n\nconst useGeoWeather = () => {\n  const [usingGeoIp, setGeoIp] = useState(false);\n  const [weather, setWeather] = useState<any>();\n  const [loading, setLoading] = useState(true);\n  const [location, setLocation] = useState<any>();\n\n  useEffect(() => {\n    async function withBrowserLocation() {\n      await navigator.geolocation.getCurrentPosition(\n        (sucess) => {\n          console.log(sucess);\n          setLocation({\n            lat: sucess.coords.latitude,\n            lng: sucess.coords.longitude,\n          });\n        },\n        async (error) => {\n          setGeoIp(true);\n          const _ipLocation = await withIpLocation();\n          console.log(error);\n        }\n      );\n    }\n\n    withBrowserLocation().then(() => {\n      useWeatherCordinates(location).then((_weather) => {\n        setWeather(_weather);\n        setLoading(false);\n      });\n    });\n  }, []);\n\n  return [weather, loading, usingGeoIp];\n};\n\nexport default useGeoWeather;\n\nexport async function useWeatherCordinates(\n  props: GeoCordinates\n): Promise<WeatherProps> {\n  console.log(props);\n  const _result = await axios.get(\n    `http://api.openweathermap.org/data/2.5/weather?units=metric&lat=${props.lat.toString()}&lon=${props?.lng.toString()}&appid=${\n      process.env.WEATHER_KEY\n    }`\n  );\n  return _result.data;\n}\n\nexport async function withIpLocation(): Promise<GeoCordinates> {\n  const _result = await axios.get(\n    `https://ipgeolocation.abstractapi.com/v1/?api_key=${process.env.IPLOCATION_KEY}`\n  );\n  return {\n    lat: _result.data.latitude,\n    lng: _result.data.longitude,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}