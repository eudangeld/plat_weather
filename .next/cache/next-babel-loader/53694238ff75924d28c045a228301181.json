{"ast":null,"code":"var _jsxFileName = \"/Users/dannylodangel/Documents/repos/plat_weather/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport Layout from \"../components/layout\";\nimport { useLayoutEffect, useState } from \"react\";\nimport { useIPWeather, useWeatherCordinates } from \"../hooks/use-weather\";\nimport Spinner from \"../components/spinner\";\n\nconst Index = _ => {\n  let _aproximateLocation = false;\n  const {\n    0: currentLocation,\n    1: setCurrentLocation\n  } = useState({\n    lat: 0,\n    lng: 0\n  });\n  const {\n    0: weather,\n    1: setWeather\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  useLayoutEffect(() => {\n    async () => await navigator.geolocation.getCurrentPosition(b => setCurrentLocation({\n      lat: b.coords.latitude,\n      lng: b.coords.longitude\n    }));\n\n    if (currentLocation.lat === 0 && currentLocation.lng === 0) {\n      _aproximateLocation = true;\n      useIPWeather().then(result => setCurrentLocation(result));\n    }\n\n    useWeatherCordinates(currentLocation).then(result => setWeather(result));\n    return () => setLoading(false);\n  }, [loading]);\n\n  if (loading) {\n    return __jsx(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return __jsx(Layout, _extends({}, weather, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 10\n    }\n  }));\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/pages/index.tsx"],"names":["Layout","useLayoutEffect","useState","useIPWeather","useWeatherCordinates","Spinner","Index","_","_aproximateLocation","currentLocation","setCurrentLocation","lat","lng","weather","setWeather","loading","setLoading","navigator","geolocation","getCurrentPosition","b","coords","latitude","longitude","then","result"],"mappings":";;;;;;AACA,OAAOA,MAAP,MAAmB,sBAAnB;AAEA,SAAoBC,eAApB,EAAqCC,QAArC,QAAqD,OAArD;AACA,SAASC,YAAT,EAAuBC,oBAAvB,QAAmD,sBAAnD;AAEA,OAAOC,OAAP,MAAoB,uBAApB;;AAEA,MAAMC,KAAoB,GAAIC,CAAD,IAAO;AAClC,MAAIC,mBAAmB,GAAG,KAA1B;AACA,QAAM;AAAA,OAACC,eAAD;AAAA,OAAkBC;AAAlB,MAAwCR,QAAQ,CAAgB;AACpES,IAAAA,GAAG,EAAE,CAD+D;AAEpEC,IAAAA,GAAG,EAAE;AAF+D,GAAhB,CAAtD;AAIA,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBZ,QAAQ,EAAtC;AACA,QAAM;AAAA,OAACa,OAAD;AAAA,OAAUC;AAAV,MAAwBd,QAAQ,CAAC,IAAD,CAAtC;AAEAD,EAAAA,eAAe,CAAC,MAAM;AACpB,gBACE,MAAMgB,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,CAAD,IAC7CV,kBAAkB,CAAC;AACjBC,MAAAA,GAAG,EAAES,CAAC,CAACC,MAAF,CAASC,QADG;AAEjBV,MAAAA,GAAG,EAAEQ,CAAC,CAACC,MAAF,CAASE;AAFG,KAAD,CADd,CADR;;AAQA,QAAId,eAAe,CAACE,GAAhB,KAAwB,CAAxB,IAA6BF,eAAe,CAACG,GAAhB,KAAwB,CAAzD,EAA4D;AAC1DJ,MAAAA,mBAAmB,GAAG,IAAtB;AACAL,MAAAA,YAAY,GAAGqB,IAAf,CAAqBC,MAAD,IAAYf,kBAAkB,CAACe,MAAD,CAAlD;AACD;;AAEDrB,IAAAA,oBAAoB,CAACK,eAAD,CAApB,CAAsCe,IAAtC,CAA4CC,MAAD,IAAYX,UAAU,CAACW,MAAD,CAAjE;AAEA,WAAO,MAAMT,UAAU,CAAC,KAAD,CAAvB;AACD,GAjBc,EAiBZ,CAACD,OAAD,CAjBY,CAAf;;AAmBA,MAAIA,OAAJ,EAAa;AACX,WAAO,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,SAAO,MAAC,MAAD,eAAYF,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAjCD;;AAmCA,eAAeP,KAAf","sourcesContent":["import { Box, Image } from \"grommet\";\nimport Layout from \"../components/layout\";\nimport { NextPage } from \"next\";\nimport { useEffect, useLayoutEffect, useState } from \"react\";\nimport { useIPWeather, useWeatherCordinates } from \"../hooks/use-weather\";\nimport { GeoCordinates } from \"../interfaces/types\";\nimport Spinner from \"../components/spinner\";\n\nconst Index: NextPage<any> = (_) => {\n  let _aproximateLocation = false;\n  const [currentLocation, setCurrentLocation] = useState<GeoCordinates>({\n    lat: 0,\n    lng: 0,\n  });\n  const [weather, setWeather] = useState<any>();\n  const [loading, setLoading] = useState(true);\n\n  useLayoutEffect(() => {\n    async () =>\n      await navigator.geolocation.getCurrentPosition((b) =>\n        setCurrentLocation({\n          lat: b.coords.latitude,\n          lng: b.coords.longitude,\n        })\n      );\n\n    if (currentLocation.lat === 0 && currentLocation.lng === 0) {\n      _aproximateLocation = true;\n      useIPWeather().then((result) => setCurrentLocation(result));\n    }\n\n    useWeatherCordinates(currentLocation).then((result) => setWeather(result));\n\n    return () => setLoading(false);\n  }, [loading]);\n\n  if (loading) {\n    return <Spinner />;\n  }\n\n  return <Layout {...weather}></Layout>;\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}