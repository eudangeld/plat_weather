{"ast":null,"code":"import { useLayoutEffect, useState } from \"react\";\nimport { useIPWeather, useWeatherCordinates } from \"./use-weather\";\n\nasync function AutoWeather(props) {\n  let _aproximateLocation = false;\n  const {\n    0: currentLocation,\n    1: setCurrentLocation\n  } = useState({\n    lat: 0,\n    lng: 0\n  });\n  useLayoutEffect(() => {\n    console.log(props === null || props === void 0 ? void 0 : props.query);\n\n    async () => await navigator.geolocation.getCurrentPosition(b => setCurrentLocation({\n      lat: b.coords.latitude,\n      lng: b.coords.longitude\n    }));\n\n    if (currentLocation.lat === 0 && currentLocation.lng === 0) {\n      _aproximateLocation = true;\n      useIPWeather().then(result => {\n        return setCurrentLocation(result);\n      });\n    }\n\n    async () => await useWeatherCordinates(currentLocation);\n  }, [currentLocation]);\n  return currentLocation;\n}\n\nexport default AutoWeather;","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/hooks/useAutoWeather.tsx"],"names":["useLayoutEffect","useState","useIPWeather","useWeatherCordinates","AutoWeather","props","_aproximateLocation","currentLocation","setCurrentLocation","lat","lng","console","log","query","navigator","geolocation","getCurrentPosition","b","coords","latitude","longitude","then","result"],"mappings":"AAAA,SAAoBA,eAApB,EAAqCC,QAArC,QAAqD,OAArD;AAEA,SAASC,YAAT,EAAuBC,oBAAvB,QAAmD,eAAnD;;AAEA,eAAeC,WAAf,CAA2BC,KAA3B,EAAsD;AACpD,MAAIC,mBAAmB,GAAG,KAA1B;AACA,QAAM;AAAA,OAACC,eAAD;AAAA,OAAkBC;AAAlB,MAAwCP,QAAQ,CAAgB;AACpEQ,IAAAA,GAAG,EAAE,CAD+D;AAEpEC,IAAAA,GAAG,EAAE;AAF+D,GAAhB,CAAtD;AAKAV,EAAAA,eAAe,CAAC,MAAM;AACpBW,IAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ,aAAYA,KAAZ,uBAAYA,KAAK,CAAEQ,KAAnB;;AAEA,gBACE,MAAMC,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,CAAD,IAC7CT,kBAAkB,CAAC;AACjBC,MAAAA,GAAG,EAAEQ,CAAC,CAACC,MAAF,CAASC,QADG;AAEjBT,MAAAA,GAAG,EAAEO,CAAC,CAACC,MAAF,CAASE;AAFG,KAAD,CADd,CADR;;AAQA,QAAIb,eAAe,CAACE,GAAhB,KAAwB,CAAxB,IAA6BF,eAAe,CAACG,GAAhB,KAAwB,CAAzD,EAA4D;AAC1DJ,MAAAA,mBAAmB,GAAG,IAAtB;AACAJ,MAAAA,YAAY,GAAGmB,IAAf,CAAqBC,MAAD,IAAY;AAC9B,eAAOd,kBAAkB,CAACc,MAAD,CAAzB;AACD,OAFD;AAGD;;AACD,gBAAY,MAAMnB,oBAAoB,CAACI,eAAD,CAAtC;AACD,GAlBc,EAkBZ,CAACA,eAAD,CAlBY,CAAf;AAoBA,SAAOA,eAAP;AACD;;AAED,eAAeH,WAAf","sourcesContent":["import { useEffect, useLayoutEffect, useState } from \"react\";\nimport { GeoCordinates } from \"../interfaces/types\";\nimport { useIPWeather, useWeatherCordinates } from \"./use-weather\";\n\nasync function AutoWeather(props?: { query: string }) {\n  let _aproximateLocation = false;\n  const [currentLocation, setCurrentLocation] = useState<GeoCordinates>({\n    lat: 0,\n    lng: 0,\n  });\n\n  useLayoutEffect(() => {\n    console.log(props?.query);\n\n    async () =>\n      await navigator.geolocation.getCurrentPosition((b) =>\n        setCurrentLocation({\n          lat: b.coords.latitude,\n          lng: b.coords.longitude,\n        })\n      );\n\n    if (currentLocation.lat === 0 && currentLocation.lng === 0) {\n      _aproximateLocation = true;\n      useIPWeather().then((result) => {\n        return setCurrentLocation(result);\n      });\n    }\n    async () => await useWeatherCordinates(currentLocation);\n  }, [currentLocation]);\n\n  return currentLocation;\n}\n\nexport default AutoWeather;\n"]},"metadata":{},"sourceType":"module"}