{"ast":null,"code":"import _regeneratorRuntime from \"/Users/dannylodangel/Documents/repos/plat_weather/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/dannylodangel/Documents/repos/plat_weather/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/dannylodangel/Documents/repos/plat_weather/pages/index.tsx\",\n    _s2 = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box } from \"grommet\";\nimport { useEffect, useState } from \"react\";\nimport { useIPWeather, useWeatherApi } from \"../hooks/use-weather\";\n\nvar Index = function Index(_) {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  var _useState = useState({\n    lat: 0,\n    lng: 0\n  }),\n      currentLocation = _useState[0],\n      setCurrentLocation = _useState[1];\n\n  var _useState2 = useState(),\n      weather = _useState2[0],\n      setWeather = _useState2[1];\n\n  useEffect(_s(function () {\n    _s();\n\n    /*#__PURE__*/\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return navigator.geolocation.getCurrentPosition(function (b) {\n                return setCurrentLocation({\n                  lat: b.coords.latitude,\n                  lng: b.coords.longitude\n                });\n              });\n\n            case 2:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    if (currentLocation.lat === 0 && currentLocation.lng === 0) {\n      useIPWeather().then(function (result) {\n        return setCurrentLocation(result);\n      });\n    }\n\n    useWeatherApi(currentLocation).then(function (result) {\n      return setWeather(result);\n    });\n  }, \"WueoWjorNFnFTVZULR2Zo/xrkq0=\", false, function () {\n    return [useIPWeather, useWeatherApi];\n  }), [currentLocation]);\n  var _city = \"\";\n  var _wind = \"\";\n  var _temp = \"\";\n  var _sunrise = \"\";\n  var _description = \"\";\n  return __jsx(Box, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 10\n    }\n  }); // return <Layout />;\n};\n\n_s2(Index, \"tF3Q24oicnUKkFfe3oTC/IFSfdU=\");\n\n_c = Index;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/pages/index.tsx"],"names":["Box","useEffect","useState","useIPWeather","useWeatherApi","Index","_","lat","lng","currentLocation","setCurrentLocation","weather","setWeather","navigator","geolocation","getCurrentPosition","b","coords","latitude","longitude","then","result","_city","_wind","_temp","_sunrise","_description"],"mappings":";;;;;;;;;AAAA,SAASA,GAAT,QAAoB,SAApB;AAGA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,sBAA5C;;AAGA,IAAMC,KAAoB,GAAG,SAAvBA,KAAuB,CAACC,CAAD,EAAO;AAAA;;AAAA;;AAAA,kBACYJ,QAAQ,CAAgB;AACpEK,IAAAA,GAAG,EAAE,CAD+D;AAEpEC,IAAAA,GAAG,EAAE;AAF+D,GAAhB,CADpB;AAAA,MAC3BC,eAD2B;AAAA,MACVC,kBADU;;AAAA,mBAKJR,QAAQ,EALJ;AAAA,MAK3BS,OAL2B;AAAA,MAKlBC,UALkB;;AAOlCX,EAAAA,SAAS,IAAC,YAAM;AAAA;;AACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQY,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAACC,CAAD;AAAA,uBAC7CN,kBAAkB,CAAC;AACjBH,kBAAAA,GAAG,EAAES,CAAC,CAACC,MAAF,CAASC,QADG;AAEjBV,kBAAAA,GAAG,EAAEQ,CAAC,CAACC,MAAF,CAASE;AAFG,iBAAD,CAD2B;AAAA,eAAzC,CADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,QAAIV,eAAe,CAACF,GAAhB,KAAwB,CAAxB,IAA6BE,eAAe,CAACD,GAAhB,KAAwB,CAAzD,EAA4D;AAC1DL,MAAAA,YAAY,GAAGiB,IAAf,CAAoB,UAACC,MAAD;AAAA,eAAYX,kBAAkB,CAACW,MAAD,CAA9B;AAAA,OAApB;AACD;;AAEDjB,IAAAA,aAAa,CAACK,eAAD,CAAb,CAA+BW,IAA/B,CAAoC,UAACC,MAAD;AAAA,aAAYT,UAAU,CAACS,MAAD,CAAtB;AAAA,KAApC;AACD,GAdQ;AAAA,YAULlB,YAVK,EAaPC,aAbO;AAAA,MAcN,CAACK,eAAD,CAdM,CAAT;AAgBA,MAAMa,KAAK,GAAG,EAAd;AACA,MAAMC,KAAK,GAAG,EAAd;AACA,MAAMC,KAAK,GAAG,EAAd;AACA,MAAMC,QAAQ,GAAG,EAAjB;AACA,MAAMC,YAAY,GAAG,EAArB;AAEA,SAAO,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP,CA7BkC,CA8BlC;AACD,CA/BD;;IAAMrB,K;;KAAAA,K;AAiCN,eAAeA,KAAf","sourcesContent":["import { Box } from \"grommet\";\nimport Layout from \"../components/layout\";\nimport { NextPage } from \"next\";\nimport { useEffect, useState } from \"react\";\nimport { useIPWeather, useWeatherApi } from \"../hooks/use-weather\";\nimport { GeoCordinates } from \"../interfaces/types\";\n\nconst Index: NextPage<any> = (_) => {\n  const [currentLocation, setCurrentLocation] = useState<GeoCordinates>({\n    lat: 0,\n    lng: 0,\n  });\n  const [weather, setWeather] = useState();\n\n  useEffect(() => {\n    async () =>\n      await navigator.geolocation.getCurrentPosition((b) =>\n        setCurrentLocation({\n          lat: b.coords.latitude,\n          lng: b.coords.longitude,\n        })\n      );\n\n    if (currentLocation.lat === 0 && currentLocation.lng === 0) {\n      useIPWeather().then((result) => setCurrentLocation(result));\n    }\n\n    useWeatherApi(currentLocation).then((result) => setWeather(result));\n  }, [currentLocation]);\n\n  const _city = \"\";\n  const _wind = \"\";\n  const _temp = \"\";\n  const _sunrise = \"\";\n  const _description = \"\";\n\n  return <Box />;\n  // return <Layout />;\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}