{"ast":null,"code":"import { useEffect, useState } from \"react\";\nimport { useIPWeather, useWeatherCordinates } from \"./use-weather\";\n\nconst useGeoWeather = () => {\n  let _aproximateLocation = false;\n  const {\n    0: currentLocation,\n    1: setCurrentLocation\n  } = useState({\n    lat: 0,\n    lng: 0\n  });\n  const {\n    0: weather,\n    1: setWeather\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  useEffect(() => {\n    async function withBrowserLocation() {\n      await navigator.geolocation.getCurrentPosition(b => setCurrentLocation({\n        lat: b.coords.latitude,\n        lng: b.coords.longitude\n      }));\n    }\n\n    async function getLocation() {\n      let geo = await withBrowserLocation();\n\n      if (geo === undefined) {\n        geo = await useIPWeather();\n      }\n\n      useWeatherCordinates(geo).then(_weather => {\n        setLoading(false);\n        return setWeather(_weather);\n      });\n    }\n\n    getLocation();\n  }, [weather]);\n  return [weather, loading];\n};\n\nexport default useGeoWeather;","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/hooks/useWeather.tsx"],"names":["useEffect","useState","useIPWeather","useWeatherCordinates","useGeoWeather","_aproximateLocation","currentLocation","setCurrentLocation","lat","lng","weather","setWeather","loading","setLoading","withBrowserLocation","navigator","geolocation","getCurrentPosition","b","coords","latitude","longitude","getLocation","geo","undefined","then","_weather"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,SAASC,YAAT,EAAuBC,oBAAvB,QAAmD,eAAnD;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAC1B,MAAIC,mBAAmB,GAAG,KAA1B;AACA,QAAM;AAAA,OAACC,eAAD;AAAA,OAAkBC;AAAlB,MAAwCN,QAAQ,CAAgB;AACpEO,IAAAA,GAAG,EAAE,CAD+D;AAEpEC,IAAAA,GAAG,EAAE;AAF+D,GAAhB,CAAtD;AAIA,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBV,QAAQ,EAAtC;AACA,QAAM;AAAA,OAACW,OAAD;AAAA,OAAUC;AAAV,MAAwBZ,QAAQ,CAAC,IAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAec,mBAAf,GAAqC;AACnC,YAAMC,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,CAAD,IAC7CX,kBAAkB,CAAC;AACjBC,QAAAA,GAAG,EAAEU,CAAC,CAACC,MAAF,CAASC,QADG;AAEjBX,QAAAA,GAAG,EAAES,CAAC,CAACC,MAAF,CAASE;AAFG,OAAD,CADd,CAAN;AAMD;;AAED,mBAAeC,WAAf,GAA6B;AAC3B,UAAIC,GAAQ,GAAG,MAAMT,mBAAmB,EAAxC;;AACA,UAAIS,GAAG,KAAKC,SAAZ,EAAuB;AACrBD,QAAAA,GAAG,GAAG,MAAMrB,YAAY,EAAxB;AACD;;AACDC,MAAAA,oBAAoB,CAACoB,GAAD,CAApB,CAA0BE,IAA1B,CAAgCC,QAAD,IAAc;AAC3Cb,QAAAA,UAAU,CAAC,KAAD,CAAV;AACA,eAAOF,UAAU,CAACe,QAAD,CAAjB;AACD,OAHD;AAID;;AAEDJ,IAAAA,WAAW;AACZ,GAtBQ,EAsBN,CAACZ,OAAD,CAtBM,CAAT;AAwBA,SAAO,CAACA,OAAD,EAAUE,OAAV,CAAP;AACD,CAlCD;;AAoCA,eAAeR,aAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { GeoCordinates } from \"../interfaces/types\";\nimport { useIPWeather, useWeatherCordinates } from \"./use-weather\";\n\nconst useGeoWeather = () => {\n  let _aproximateLocation = false;\n  const [currentLocation, setCurrentLocation] = useState<GeoCordinates>({\n    lat: 0,\n    lng: 0,\n  });\n  const [weather, setWeather] = useState<any>();\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    async function withBrowserLocation() {\n      await navigator.geolocation.getCurrentPosition((b) =>\n        setCurrentLocation({\n          lat: b.coords.latitude,\n          lng: b.coords.longitude,\n        })\n      );\n    }\n\n    async function getLocation() {\n      let geo: any = await withBrowserLocation();\n      if (geo === undefined) {\n        geo = await useIPWeather();\n      }\n      useWeatherCordinates(geo).then((_weather) => {\n        setLoading(false);\n        return setWeather(_weather);\n      });\n    }\n\n    getLocation();\n  }, [weather]);\n\n  return [weather, loading];\n};\n\nexport default useGeoWeather;\n"]},"metadata":{},"sourceType":"module"}