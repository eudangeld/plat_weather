{"ast":null,"code":"var _jsxFileName = \"/Users/dannylodangel/Documents/repos/plat_weather/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport Layout from \"../components/layout\";\nimport { useState } from \"react\";\n\nconst Index = _ => {\n  let _aproximateLocation = false;\n  const {\n    0: currentLocation,\n    1: setCurrentLocation\n  } = useState({\n    lat: 0,\n    lng: 0\n  });\n  const {\n    0: weather,\n    1: setWeather\n  } = useState(); // useEffect(() => {\n  //   async () =>\n  //     await navigator.geolocation.getCurrentPosition((b) =>\n  //       setCurrentLocation({\n  //         lat: b.coords.latitude,\n  //         lng: b.coords.longitude,\n  //       })\n  //     );\n  // if (currentLocation.lat === 0 && currentLocation.lng === 0) {\n  //   _aproximateLocation = true;\n  //   useIPWeather().then((result) => setCurrentLocation(result));\n  // }\n  // useWeatherCordinates(currentLocation).then((result) => setWeather(result));\n  // }, []);\n\n  console.log(\"chegamos\");\n  return __jsx(Layout, _extends({}, weather, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 10\n    }\n  }));\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/pages/index.tsx"],"names":["Layout","useState","Index","_","_aproximateLocation","currentLocation","setCurrentLocation","lat","lng","weather","setWeather","console","log"],"mappings":";;;;;;AACA,OAAOA,MAAP,MAAmB,sBAAnB;AAEA,SAAoBC,QAApB,QAAoC,OAApC;;AAIA,MAAMC,KAAoB,GAAIC,CAAD,IAAO;AAClC,MAAIC,mBAAmB,GAAG,KAA1B;AACA,QAAM;AAAA,OAACC,eAAD;AAAA,OAAkBC;AAAlB,MAAwCL,QAAQ,CAAgB;AACpEM,IAAAA,GAAG,EAAE,CAD+D;AAEpEC,IAAAA,GAAG,EAAE;AAF+D,GAAhB,CAAtD;AAIA,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBT,QAAQ,EAAtC,CANkC,CAQlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;AAEAU,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AAEA,SAAO,MAAC,MAAD,eAAYH,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CA5BD;;AA8BA,eAAeP,KAAf","sourcesContent":["import { Box, Image } from \"grommet\";\nimport Layout from \"../components/layout\";\nimport { NextPage } from \"next\";\nimport { useEffect, useState } from \"react\";\nimport { useIPWeather, useWeatherCordinates } from \"../hooks/use-weather\";\nimport { GeoCordinates } from \"../interfaces/types\";\n\nconst Index: NextPage<any> = (_) => {\n  let _aproximateLocation = false;\n  const [currentLocation, setCurrentLocation] = useState<GeoCordinates>({\n    lat: 0,\n    lng: 0,\n  });\n  const [weather, setWeather] = useState<any>();\n\n  // useEffect(() => {\n  //   async () =>\n  //     await navigator.geolocation.getCurrentPosition((b) =>\n  //       setCurrentLocation({\n  //         lat: b.coords.latitude,\n  //         lng: b.coords.longitude,\n  //       })\n  //     );\n\n  // if (currentLocation.lat === 0 && currentLocation.lng === 0) {\n  //   _aproximateLocation = true;\n  //   useIPWeather().then((result) => setCurrentLocation(result));\n  // }\n\n  // useWeatherCordinates(currentLocation).then((result) => setWeather(result));\n  // }, []);\n\n  console.log(\"chegamos\");\n\n  return <Layout {...weather} />;\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}