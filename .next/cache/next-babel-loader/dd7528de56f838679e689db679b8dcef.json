{"ast":null,"code":"import _regeneratorRuntime from \"/Users/dannylodangel/Documents/repos/plat_weather/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/dannylodangel/Documents/repos/plat_weather/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s2 = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\n\nvar useGeoWeather = function useGeoWeather() {\n  _s2();\n\n  var _useState = useState(false),\n      usingGeoIp = _useState[0],\n      setGeoIp = _useState[1];\n\n  var _useState2 = useState(),\n      weather = _useState2[0],\n      setWeather = _useState2[1];\n\n  var _useState3 = useState(true),\n      loading = _useState3[0],\n      setLoading = _useState3[1];\n\n  var _useState4 = useState({\n    lat: 0,\n    lng: 0\n  }),\n      location = _useState4[0],\n      setLocation = _useState4[1];\n\n  useEffect(function () {\n    function withBrowserLocation() {\n      return _withBrowserLocation.apply(this, arguments);\n    }\n\n    function _withBrowserLocation() {\n      var _s = $RefreshSig$();\n\n      _withBrowserLocation = _asyncToGenerator(_s( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var success, error;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                error = function _error(err) {\n                  console.warn(\"ERROR(\" + err.code + \"): \" + err.message);\n                };\n\n                success = function _success(pos) {\n                  console.log(\"Sucesss\");\n                  return setLocation({\n                    lat: pos.coords.latitude,\n                    lng: pos.coords.longitude\n                  });\n                };\n\n                _s();\n\n                console.log(\"vamos aí\");\n                navigator.geolocation.getCurrentPosition( // (sucess) => {\n                //   console.log(\"Sucesss\");\n                //   console.log(sucess);\n                //   return setLocation({\n                //     lat: sucess.coords.latitude,\n                //     lng: sucess.coords.longitude,\n                //   });\n                // },\n                // async (error) => {\n                //   console.log(\"error\");\n                //   setGeoIp(true);\n                //   const _ipLocation = await withIpLocation();\n                //   return setLocation(_ipLocation);\n                // }\n                success, error);\n                useWeatherCordinates(location).then(function (_weather) {\n                  console.log(\"vamos lá pegar\");\n                  setWeather(_weather);\n                  setLoading(false);\n                });\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }), \"ED1WSfPuAutyyotkH0ImvhNO/X4=\", false, function () {\n        return [useWeatherCordinates];\n      }));\n      return _withBrowserLocation.apply(this, arguments);\n    }\n\n    withBrowserLocation();\n  }, []);\n  return [weather, loading, usingGeoIp];\n};\n\n_s2(useGeoWeather, \"GPyJpcyZXBYkxM+0mCqJdKHS0vg=\");\n\nexport default useGeoWeather;\nexport function useWeatherCordinates(_x) {\n  return _useWeatherCordinates.apply(this, arguments);\n}\n\nfunction _useWeatherCordinates() {\n  _useWeatherCordinates = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(props) {\n    var _result;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            console.log(props);\n            _context2.next = 3;\n            return axios.get(\"http://api.openweathermap.org/data/2.5/weather?units=metric&lat=\".concat(props.lat.toString(), \"&lon=\").concat(props === null || props === void 0 ? void 0 : props.lng.toString(), \"&appid=\").concat(process.env.WEATHER_KEY));\n\n          case 3:\n            _result = _context2.sent;\n            return _context2.abrupt(\"return\", _result.data);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _useWeatherCordinates.apply(this, arguments);\n}\n\nexport function withIpLocation() {\n  return _withIpLocation.apply(this, arguments);\n}\n\nfunction _withIpLocation() {\n  _withIpLocation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var _result;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return axios.get(\"https://ipgeolocation.abstractapi.com/v1/?api_key=\".concat(process.env.IPLOCATION_KEY));\n\n          case 2:\n            _result = _context3.sent;\n            return _context3.abrupt(\"return\", {\n              lat: _result.data.latitude,\n              lng: _result.data.longitude\n            });\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _withIpLocation.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/hooks/useWeather.tsx"],"names":["axios","useEffect","useState","useGeoWeather","usingGeoIp","setGeoIp","weather","setWeather","loading","setLoading","lat","lng","location","setLocation","withBrowserLocation","success","error","err","console","warn","code","message","pos","log","coords","latitude","longitude","navigator","geolocation","getCurrentPosition","useWeatherCordinates","then","_weather","props","get","toString","process","env","WEATHER_KEY","_result","data","withIpLocation","IPLOCATION_KEY"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { GeoCordinates, WeatherProps } from \"../interfaces/types\";\n\nconst useGeoWeather = () => {\n  const [usingGeoIp, setGeoIp] = useState(false);\n  const [weather, setWeather] = useState<any>();\n  const [loading, setLoading] = useState(true);\n  const [location, setLocation] = useState<GeoCordinates>({\n    lat: 0,\n    lng: 0,\n  });\n\n  useEffect(() => {\n    async function withBrowserLocation() {\n      console.log(\"vamos aí\");\n      navigator.geolocation.getCurrentPosition(\n        // (sucess) => {\n        //   console.log(\"Sucesss\");\n        //   console.log(sucess);\n        //   return setLocation({\n        //     lat: sucess.coords.latitude,\n        //     lng: sucess.coords.longitude,\n        //   });\n        // },\n        // async (error) => {\n        //   console.log(\"error\");\n        //   setGeoIp(true);\n        //   const _ipLocation = await withIpLocation();\n        //   return setLocation(_ipLocation);\n        // }\n\n        success,\n        error\n      );\n\n      function success(pos: any) {\n        console.log(\"Sucesss\");\n        return setLocation({\n          lat: pos.coords.latitude,\n          lng: pos.coords.longitude,\n        });\n      }\n\n      function error(err: any) {\n        console.warn(\"ERROR(\" + err.code + \"): \" + err.message);\n      }\n\n      useWeatherCordinates(location).then((_weather) => {\n        console.log(\"vamos lá pegar\");\n        setWeather(_weather);\n        setLoading(false);\n      });\n    }\n\n    withBrowserLocation();\n  }, []);\n\n  return [weather, loading, usingGeoIp];\n};\n\nexport default useGeoWeather;\n\nexport async function useWeatherCordinates(\n  props: GeoCordinates\n): Promise<WeatherProps> {\n  console.log(props);\n  const _result = await axios.get(\n    `http://api.openweathermap.org/data/2.5/weather?units=metric&lat=${props.lat.toString()}&lon=${props?.lng.toString()}&appid=${\n      process.env.WEATHER_KEY\n    }`\n  );\n  return _result.data;\n}\n\nexport async function withIpLocation(): Promise<GeoCordinates> {\n  const _result = await axios.get(\n    `https://ipgeolocation.abstractapi.com/v1/?api_key=${process.env.IPLOCATION_KEY}`\n  );\n  return {\n    lat: _result.data.latitude,\n    lng: _result.data.longitude,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}