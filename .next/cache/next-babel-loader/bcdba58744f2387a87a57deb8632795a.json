{"ast":null,"code":"import _regeneratorRuntime from \"/Users/dannylodangel/Documents/repos/plat_weather/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/dannylodangel/Documents/repos/plat_weather/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport axios from \"axios\";\nexport function useWeatherCordinates(_x) {\n  return _useWeatherCordinates.apply(this, arguments);\n}\n\nfunction _useWeatherCordinates() {\n  _useWeatherCordinates = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(props) {\n    var _result;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return axios.get(\"http://api.openweathermap.org/data/2.5/weather?units=metric&lat=\".concat(props.lat.toString(), \"&lon=\").concat(props === null || props === void 0 ? void 0 : props.lng.toString(), \"&appid=\").concat(process.env.WEATHER_KEY));\n\n          case 2:\n            _result = _context.sent;\n            return _context.abrupt(\"return\", _result.data);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _useWeatherCordinates.apply(this, arguments);\n}\n\nexport function useIPWeather() {\n  return _useIPWeather.apply(this, arguments);\n}\n\nfunction _useIPWeather() {\n  _useIPWeather = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var _result;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return axios.get(\"https://ipgeolocation.abstractapi.com/v1/?api_key=\".concat(process.env.IPLOCATION_KEY));\n\n          case 2:\n            _result = _context2.sent;\n            return _context2.abrupt(\"return\", {\n              lat: _result.data.latitude,\n              lng: _result.data.longitude\n            });\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _useIPWeather.apply(this, arguments);\n}\n\nexport function useFriendStatus() {\n  _s();\n\n  var _useState = useState(null),\n      isOnline = _useState[0],\n      setIsOnline = _useState[1];\n\n  useEffect(function () {\n    function handleStatusChange(status) {\n      setIsOnline(status.isOnline);\n    }\n  });\n  return isOnline;\n}\n\n_s(useFriendStatus, \"HLSnnfJYDaeB5hXQTNbVZdmJwXQ=\");","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/hooks/use-weather.ts"],"names":["useState","useEffect","axios","useWeatherCordinates","props","get","lat","toString","lng","process","env","WEATHER_KEY","_result","data","useIPWeather","IPLOCATION_KEY","latitude","longitude","useFriendStatus","isOnline","setIsOnline","handleStatusChange","status"],"mappings":";;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,gBAAsBC,oBAAtB;AAAA;AAAA;;;mFAAO,iBACLC,KADK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAIiBF,KAAK,CAACG,GAAN,2EAC+CD,KAAK,CAACE,GAAN,CAAUC,QAAV,EAD/C,kBAC2EH,KAD3E,aAC2EA,KAD3E,uBAC2EA,KAAK,CAAEI,GAAP,CAAWD,QAAX,EAD3E,oBAElBE,OAAO,CAACC,GAAR,CAAYC,WAFM,EAJjB;;AAAA;AAICC,YAAAA,OAJD;AAAA,6CASEA,OAAO,CAACC,IATV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAcP,gBAAsBC,YAAtB;AAAA;AAAA;;;2EAAO;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACiBZ,KAAK,CAACG,GAAN,6DACiCI,OAAO,CAACC,GAAR,CAAYK,cAD7C,EADjB;;AAAA;AACCH,YAAAA,OADD;AAAA,8CAIE;AACLN,cAAAA,GAAG,EAAEM,OAAO,CAACC,IAAR,CAAaG,QADb;AAELR,cAAAA,GAAG,EAAEI,OAAO,CAACC,IAAR,CAAaI;AAFb,aAJF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAWP,OAAO,SAASC,eAAT,GAA2B;AAAA;;AAAA,kBACAlB,QAAQ,CAAC,IAAD,CADR;AAAA,MACzBmB,QADyB;AAAA,MACfC,WADe;;AAGhCnB,EAAAA,SAAS,CAAC,YAAM;AACd,aAASoB,kBAAT,CAA4BC,MAA5B,EAAoC;AAClCF,MAAAA,WAAW,CAACE,MAAM,CAACH,QAAR,CAAX;AACD;AAEF,GALQ,CAAT;AAOA,SAAOA,QAAP;AACD;;GAXeD,e","sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport { GeoCordinates, WeatherProps } from \"../interfaces/types\";\n\nexport async function useWeatherCordinates(\n  props: GeoCordinates\n): Promise<WeatherProps> {\n  \n  const _result = await axios.get(\n    `http://api.openweathermap.org/data/2.5/weather?units=metric&lat=${props.lat.toString()}&lon=${props?.lng.toString()}&appid=${\n      process.env.WEATHER_KEY\n    }`\n  );\n  return _result.data;\n\n  \n}\n\nexport async function useIPWeather(): Promise<GeoCordinates> {\n  const _result = await axios.get(\n    `https://ipgeolocation.abstractapi.com/v1/?api_key=${process.env.IPLOCATION_KEY}`\n  );\n  return {\n    lat: _result.data.latitude,\n    lng: _result.data.longitude,\n  };\n}\n\n\nexport function useFriendStatus() {\n  const [isOnline, setIsOnline] = useState(null);\n\n  useEffect(() => {\n    function handleStatusChange(status) {\n      setIsOnline(status.isOnline);\n    }\n\n  });\n\n  return isOnline;\n}"]},"metadata":{},"sourceType":"module"}