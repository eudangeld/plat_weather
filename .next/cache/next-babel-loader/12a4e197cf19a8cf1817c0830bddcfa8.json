{"ast":null,"code":"import _regeneratorRuntime from \"/Users/dannylodangel/Documents/repos/plat_weather/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/dannylodangel/Documents/repos/plat_weather/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/dannylodangel/Documents/repos/plat_weather/pages/index.tsx\",\n    _s2 = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box } from \"grommet\";\nimport { useEffect, useState } from \"react\";\nimport { useIPWeather, useWeatherApi } from \"../hooks/use-weather\";\n\nvar Index = function Index(_) {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  var _useState = useState({\n    lat: 0,\n    lng: 0\n  }),\n      currentLocation = _useState[0],\n      setCurrentLocation = _useState[1];\n\n  var _useState2 = useState(),\n      weather = _useState2[0],\n      setWeather = _useState2[1];\n\n  console.log(_);\n  useEffect(_s(function () {\n    _s();\n\n    /*#__PURE__*/\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return navigator.geolocation.getCurrentPosition(function (b) {\n                return setCurrentLocation({\n                  lat: b.coords.latitude,\n                  lng: b.coords.longitude\n                });\n              });\n\n            case 2:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    if (currentLocation.lat === 0 && currentLocation.lng === 0) {\n      useIPWeather().then(function (result) {\n        return setCurrentLocation(result);\n      });\n    }\n\n    useWeatherApi(currentLocation).then(function (result) {\n      return setWeather(result);\n    });\n  }, \"WueoWjorNFnFTVZULR2Zo/xrkq0=\", false, function () {\n    return [useIPWeather, useWeatherApi];\n  }), [currentLocation]);\n  return __jsx(Box, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 10\n    }\n  }); // return <Layout {...newsProps}></Layout>;\n};\n\n_s2(Index, \"tF3Q24oicnUKkFfe3oTC/IFSfdU=\");\n\n_c = Index;\n\nIndex.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref2) {\n    var req, result;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            req = _ref2.req;\n            result = navigator.geolocation.getCurrentPosition(function (a) {\n              return a;\n            });\n            return _context2.abrupt(\"return\", result);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/pages/index.tsx"],"names":["Box","useEffect","useState","useIPWeather","useWeatherApi","Index","_","lat","lng","currentLocation","setCurrentLocation","weather","setWeather","console","log","navigator","geolocation","getCurrentPosition","b","coords","latitude","longitude","then","result","getInitialProps","req","a"],"mappings":";;;;;;;;;AAAA,SAASA,GAAT,QAAoB,SAApB;AAEA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,sBAA5C;;AAGA,IAAMC,KAAoB,GAAG,SAAvBA,KAAuB,CAACC,CAAD,EAAO;AAAA;;AAAA;;AAAA,kBACYJ,QAAQ,CAAgB;AACpEK,IAAAA,GAAG,EAAE,CAD+D;AAEpEC,IAAAA,GAAG,EAAE;AAF+D,GAAhB,CADpB;AAAA,MAC3BC,eAD2B;AAAA,MACVC,kBADU;;AAAA,mBAKJR,QAAQ,EALJ;AAAA,MAK3BS,OAL2B;AAAA,MAKlBC,UALkB;;AAOlCC,EAAAA,OAAO,CAACC,GAAR,CAAYR,CAAZ;AAEAL,EAAAA,SAAS,IAAC,YAAM;AAAA;;AACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQc,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAACC,CAAD;AAAA,uBAC7CR,kBAAkB,CAAC;AACjBH,kBAAAA,GAAG,EAAEW,CAAC,CAACC,MAAF,CAASC,QADG;AAEjBZ,kBAAAA,GAAG,EAAEU,CAAC,CAACC,MAAF,CAASE;AAFG,iBAAD,CAD2B;AAAA,eAAzC,CADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,QAAIZ,eAAe,CAACF,GAAhB,KAAwB,CAAxB,IAA6BE,eAAe,CAACD,GAAhB,KAAwB,CAAzD,EAA4D;AAC1DL,MAAAA,YAAY,GAAGmB,IAAf,CAAoB,UAACC,MAAD;AAAA,eAAYb,kBAAkB,CAACa,MAAD,CAA9B;AAAA,OAApB;AACD;;AAEDnB,IAAAA,aAAa,CAACK,eAAD,CAAb,CAA+Ba,IAA/B,CAAoC,UAACC,MAAD;AAAA,aAAYX,UAAU,CAACW,MAAD,CAAtB;AAAA,KAApC;AACD,GAdQ;AAAA,YAULpB,YAVK,EAaPC,aAbO;AAAA,MAcN,CAACK,eAAD,CAdM,CAAT;AAgBA,SAAO,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP,CAzBkC,CA2BlC;AACD,CA5BD;;IAAMJ,K;;KAAAA,K;;AA8BNA,KAAK,CAACmB,eAAN;AAAA,uEAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,GAAT,SAASA,GAAT;AAChBF,YAAAA,MADgB,GACPR,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAACS,CAAD;AAAA,qBAAOA,CAAP;AAAA,aAAzC,CADO;AAAA,8CAGfH,MAHe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA;;AAMA,eAAelB,KAAf","sourcesContent":["import { Box } from \"grommet\";\nimport { NextPage } from \"next\";\nimport { useEffect, useState } from \"react\";\nimport { useIPWeather, useWeatherApi } from \"../hooks/use-weather\";\nimport { GeoCordinates } from \"../interfaces/types\";\n\nconst Index: NextPage<any> = (_) => {\n  const [currentLocation, setCurrentLocation] = useState<GeoCordinates>({\n    lat: 0,\n    lng: 0,\n  });\n  const [weather, setWeather] = useState();\n\n  console.log(_);\n\n  useEffect(() => {\n    async () =>\n      await navigator.geolocation.getCurrentPosition((b) =>\n        setCurrentLocation({\n          lat: b.coords.latitude,\n          lng: b.coords.longitude,\n        })\n      );\n\n    if (currentLocation.lat === 0 && currentLocation.lng === 0) {\n      useIPWeather().then((result) => setCurrentLocation(result));\n    }\n\n    useWeatherApi(currentLocation).then((result) => setWeather(result));\n  }, [currentLocation]);\n\n  return <Box></Box>;\n\n  // return <Layout {...newsProps}></Layout>;\n};\n\nIndex.getInitialProps = async ({ req }) => {\n  const result = navigator.geolocation.getCurrentPosition((a) => a);\n\n  return result;\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}