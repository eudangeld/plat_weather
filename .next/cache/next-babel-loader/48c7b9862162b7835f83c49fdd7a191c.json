{"ast":null,"code":"import _extends from \"/Users/dannylodangel/Documents/repos/plat_weather/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"/Users/dannylodangel/Documents/repos/plat_weather/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/dannylodangel/Documents/repos/plat_weather/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/dannylodangel/Documents/repos/plat_weather/pages/index.tsx\",\n    _s3 = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from \"../components/layout\";\nimport { useEffect, useState } from \"react\";\nimport { useIPWeather, useWeatherCordinates } from \"../hooks/use-weather\";\nimport Spinner from \"../components/spinner\";\n\nvar Index = function Index(_) {\n  _s3();\n\n  var _s2 = $RefreshSig$();\n\n  var _aproximateLocation = false;\n\n  var _useState = useState({\n    lat: 0,\n    lng: 0\n  }),\n      currentLocation = _useState[0],\n      setCurrentLocation = _useState[1];\n\n  var _useState2 = useState(),\n      weather = _useState2[0],\n      setWeather = _useState2[1];\n\n  var _useState3 = useState(true),\n      loading = _useState3[0],\n      setLoading = _useState3[1];\n\n  useEffect(_s2(function () {\n    _s2();\n\n    /*#__PURE__*/\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", navigator.geolocation.getCurrentPosition(function (b) {\n                return setCurrentLocation({\n                  lat: b.coords.latitude,\n                  lng: b.coords.longitude\n                });\n              }));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    if (currentLocation.lat === 0 && currentLocation.lng === 0) {\n      var _s = $RefreshSig$();\n\n      _aproximateLocation = true;\n      useIPWeather().then(_s(function (result) {\n        _s();\n\n        useWeatherCordinates(result).then(function (result) {\n          return setWeather(result);\n        }); // setCurrentLocation(result);\n      }, \"ED1WSfPuAutyyotkH0ImvhNO/X4=\", false, function () {\n        return [useWeatherCordinates];\n      }));\n    } // setLoading(false);\n\n  }, \"YDB0Q8+AkUM/Gvh+6KIywZxTBjo=\", false, function () {\n    return [useIPWeather];\n  }), [currentLocation]);\n\n  if (loading) {\n    return __jsx(Spinner, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return __jsx(Layout, _extends({}, weather, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 10\n    }\n  }));\n};\n\n_s3(Index, \"3/KKT+z3/j5xp1RHP9feBfaePbA=\");\n\n_c = Index;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/Users/dannylodangel/Documents/repos/plat_weather/pages/index.tsx"],"names":["Layout","useEffect","useState","useIPWeather","useWeatherCordinates","Spinner","Index","_","_aproximateLocation","lat","lng","currentLocation","setCurrentLocation","weather","setWeather","loading","setLoading","navigator","geolocation","getCurrentPosition","b","coords","latitude","longitude","then","result"],"mappings":";;;;;;;;;;AACA,OAAOA,MAAP,MAAmB,sBAAnB;AAEA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,YAAT,EAAuBC,oBAAvB,QAAmD,sBAAnD;AAEA,OAAOC,OAAP,MAAoB,uBAApB;;AAEA,IAAMC,KAAoB,GAAG,SAAvBA,KAAuB,CAACC,CAAD,EAAO;AAAA;;AAAA;;AAClC,MAAIC,mBAAmB,GAAG,KAA1B;;AADkC,kBAEYN,QAAQ,CAAgB;AACpEO,IAAAA,GAAG,EAAE,CAD+D;AAEpEC,IAAAA,GAAG,EAAE;AAF+D,GAAhB,CAFpB;AAAA,MAE3BC,eAF2B;AAAA,MAEVC,kBAFU;;AAAA,mBAMJV,QAAQ,EANJ;AAAA,MAM3BW,OAN2B;AAAA,MAMlBC,UANkB;;AAAA,mBAOJZ,QAAQ,CAAC,IAAD,CAPJ;AAAA,MAO3Ba,OAP2B;AAAA,MAOlBC,UAPkB;;AASlCf,EAAAA,SAAS,KAAC,YAAM;AAAA;;AACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACEgB,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAACC,CAAD;AAAA,uBACvCR,kBAAkB,CAAC;AACjBH,kBAAAA,GAAG,EAAEW,CAAC,CAACC,MAAF,CAASC,QADG;AAEjBZ,kBAAAA,GAAG,EAAEU,CAAC,CAACC,MAAF,CAASE;AAFG,iBAAD,CADqB;AAAA,eAAzC,CADF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,QAAIZ,eAAe,CAACF,GAAhB,KAAwB,CAAxB,IAA6BE,eAAe,CAACD,GAAhB,KAAwB,CAAzD,EAA4D;AAAA;;AAC1DF,MAAAA,mBAAmB,GAAG,IAAtB;AACAL,MAAAA,YAAY,GAAGqB,IAAf,IAAoB,UAACC,MAAD,EAAY;AAAA;;AAC9BrB,QAAAA,oBAAoB,CAACqB,MAAD,CAApB,CAA6BD,IAA7B,CAAkC,UAACC,MAAD;AAAA,iBAAYX,UAAU,CAACW,MAAD,CAAtB;AAAA,SAAlC,EAD8B,CAE9B;AACD,OAHD;AAAA,gBACErB,oBADF;AAAA;AAID,KAfa,CAiBd;;AACD,GAlBQ;AAAA,YAWLD,YAXK;AAAA,MAkBN,CAACQ,eAAD,CAlBM,CAAT;;AAoBA,MAAII,OAAJ,EAAa;AACX,WAAO,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,SAAO,MAAC,MAAD,eAAYF,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAlCD;;IAAMP,K;;KAAAA,K;AAoCN,eAAeA,KAAf","sourcesContent":["import { Box, Image } from \"grommet\";\nimport Layout from \"../components/layout\";\nimport { NextPage } from \"next\";\nimport { useEffect, useState } from \"react\";\nimport { useIPWeather, useWeatherCordinates } from \"../hooks/use-weather\";\nimport { GeoCordinates } from \"../interfaces/types\";\nimport Spinner from \"../components/spinner\";\n\nconst Index: NextPage<any> = (_) => {\n  let _aproximateLocation = false;\n  const [currentLocation, setCurrentLocation] = useState<GeoCordinates>({\n    lat: 0,\n    lng: 0,\n  });\n  const [weather, setWeather] = useState<any>();\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    async () =>\n      navigator.geolocation.getCurrentPosition((b) =>\n        setCurrentLocation({\n          lat: b.coords.latitude,\n          lng: b.coords.longitude,\n        })\n      );\n\n    if (currentLocation.lat === 0 && currentLocation.lng === 0) {\n      _aproximateLocation = true;\n      useIPWeather().then((result) => {\n        useWeatherCordinates(result).then((result) => setWeather(result));\n        // setCurrentLocation(result);\n      });\n    }\n\n    // setLoading(false);\n  }, [currentLocation]);\n\n  if (loading) {\n    return <Spinner />;\n  }\n\n  return <Layout {...weather} />;\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}